3.1
(define (make-accumulator lsum)
  (lambda (x)
    (set! lsum (+ lsum x))
    lsum))
3.2
(define (make-monitored f)
  (let ((count 0))
    (lambda (x)
     (cond ((eq? x 'how-many-calls?) count)
	   ((eq? x 'reset-count) (set! count 0))
	   (else
	    (set! count (+ count 1))
	    (f x))))))

3.3
(define (make-account pw balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch pw2 m)
    (if (eq? pw pw2)
	(cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (display "Unknown request -- MAKE-ACCOUNT")))
	(display "Incorrect password")))
  dispatch)

3.5
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (estimate-integral p x1 x2 y1 y2 trials) ;use float for accuracy
  (define (randsq)
    (cons (random-in-range x2 x1) (random-in-range y2 y1)))
  (define (iter trials-left passed)
    (if (= trials-left 0)
	passed
	(let ((point (randsq)))
	  (iter (- trials-left 1)
		(if (p (car point) (cdr point))
		    (+ passed 1)
		    passed)))))
  (define (sq-size)
    (* (- x1 x2) (- y1 y2)))
  (* (sq-size) (/ (iter trials 0) trials))
  )
(define (sq x) (* x x))
(define (some-circle x y)
  (<= (+ (sq (- x 5)) (sq (- y 7))) 9))

3.6
(define (rand option)
  (cond ((eq? option 'generate) random)
	((eq? option 'reset) random-seed)))

3.7
(define (make-joint account prevpw newpw)
  (let ((withdraw (account prevpw 'withdraw))
	(deposit (account prevpw 'deposit)))
    (if (null? withdraw)
	(display "Password Incorrect")
	(lambda (pw m)
	  (if (eq? pw newpw)
	      (cond ((eq? m 'withdraw) withdraw)
		    ((eq? m 'deposit) deposit)
		    (else (display "Unknown request -- Make-account")))
	      (display "Incorrect Password"))))))

3.8
(define local 1)
(define (f x)
  (set! local (* local x))
  local)


#3.14 - reverse!
n
3.17
(define (count-pairs x)
    (define (exist? p pairs)
      (if (null? pairs)
          #f
          (or (eq? p (car pairs)) (exist? p (cdr pairs)))))
    (define (register p pairs)
      (if (exist? p pairs)
          pairs
          (cons p pairs)))
    (define (iter x pairs)
      (if (pair? x)
          (if (exist? x pairs)
              pairs
              (iter (car x) (iter (cdr x) (register x pairs))))
          pairs))
    (length (iter x '())))

3.18
#ÀÌ¿ëÇÑ ·çÇÁ Á¦Á¶±â
(define (make-loop lis)
    (define (iter rest)
      (if (null? (cdr rest))
          (set-cdr! rest lis)
          (iter (cdr rest))))
    (iter lis))

#w/ state
(define (looped? x)
    (define dummy '())
    (cond
      ((eq? x 'visited) #t)
      ((pair? x)
       (set! dummy (cdr x))
       (set-cdr! x 'visited)
       (let ((result (looped? dummy)))
         (set-cdr! x dummy)
         result))
      (else #f)))

3.19
(define (looped? x)
    (define (safe-cdr x)
      (if (pair? x)
          (cdr x)
          '()))
    (define (iter slow fast)
      (cond
        ((null? fast) #f)
        ((eq? slow fast) #t)
        (else (iter (safe-cdr slow) (safe-cdr (safe-cdr fast))))))
    (iter x (safe-cdr x)))

3.23
(define (make-deque) (cons '() '()))
(define (single-deque? x) (eq? (front-deque x) (rear-deque x)))
(define (front-deque x) (car x))
(define (rear-deque x) (cdr x))
(define (empty-deque? x) (null? (front-deque x)))
(define (front-insert-deque! x item)
    (let ((new-pair (cons item '())))
      (if (empty-deque? x)
          (assoc-deque! x new-pair)
          (begin
            (set-cdr! new-pair (car x))
            (set-front-ptr! x new-pair)
            x))))
(define (rear-insert-deque! x item)
    (let ((new-pair (cons item '())))
      (if (empty-deque? x)
          (assoc-deque! x new-pair)
          (begin
            (set-cdr! (rear-deque x) new-pair)
            (set-rear-ptr! x new-pair)
            x))))
(define (assoc-deque! x pair)
    (set-front-ptr! x pair)
    (set-rear-ptr! x pair)
    x)
 (define (rear-insert-deque! x item)
      (let ((new-pair (cons item '())))
        (if (empty-deque? x)
            (assoc-deque! x new-pair)
            (begin
              (set-cdr! (rear-deque x) new-pair)
              (set-rear-ptr! x new-pair)
              x))))
(define (front-insert-deque! x item)
    (let ((new-pair (cons item '())))
      (if (empty-deque? x)
          (assoc-deque! x new-pair)
          (begin
            (set-cdr! new-pair (car x))
            (set-front-ptr! x new-pair)
            x))))
(define (front-delete-deque! x)
    (if (single-deque? x)
        (make-deque)
        (begin
          (set-front-ptr! x (cdr (front-deque x)))
          x)))
(define (rear-delete-deque! x)
    (if (single-deque? x)
        (make-deque)
        (begin
          (let ((new-end (find-pre-rear x)))
            (set-cdr! new-end '())
            (set-rear-ptr! x new-end)
            x))))
(define (print-deque x)
    (display (front-deque x)))
(define (set-front-ptr! x item) (set-car! x item))
(define (set-rear-ptr! x item) (set-cdr! x item))
(define (find-pre-rear x)
    (define (iter rear list)
      (if (eq? (cdr list) rear)
          list
          (iter rear (cdr list))))
    (if (single-deque? x)
        (errorf 'find-pre-rear "Cannot Use in single pair deque")
        (iter (rear-deque x) (front-deque x))))

3.24
(define (make-table same-key?)
    (let ((local-table (list '*table*)))
      (define (assoc key records)
        (cond
          ((null? records) #f)
          ((same-key? key (caar records)) (car records))
          (else (assoc key (cdr records)))))
      (define (lookup key-1 key-2)
        (let ((subtable (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record (assoc key-2 (cdr subtable))))
                (if record
                    (cdr record)
                    #f))
              #f)))
      (define (insert! key-1 key-2 value)
        (let ((subtable (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record (assoc key-2 (cdr subtable))))
                (if record
                    (set-cdr! record value)
                    (set-cdr! subtable
                              (cons (cons key-2 value)
                                    (cdr subtable)))))
              (set-cdr! local-table
                        (cons (list key-1
                                    (cons key-2 value))
                              (cdr local-table)))))
        'ok)
      (define (dispatch m)
        (cond ((eq? m 'lookup-proc) lookup)
              ((eq? m 'insert-proc!) insert!)
              (else (errorf m "Unknown operation -- TABLE"))))
      dispatch))

3.25
(define (make-table same-key?)
  (let ((local-table (list '*table*)))
    (define (single-pair? pair)
      (null? (cdr pair)))
    (define (safe-cdr pair)
      (if (pair? pair) (cdr pair) pair))
    (define (assoc key records)
      (cond
       ((null? records) #f)
       ((same-key? key (caar records)) (car records))
       (else (assoc key (cdr records)))))
    (define (lookup keylist)
      (define (rec keylist subtable)
	(let ((key (car keylist)))
	  (if (single-pair? keylist)
	      (safe-cdr (assoc key (cdr subtable)))
	      (let ((new-subtable (assoc key (cdr subtable))))
		(if new-subtable
		    (rec (cdr keylist) new-subtable)
		    #f)))))
      (rec keylist local-table))
    (define (insert! keylist value)
      (define (rec keylist value subtable)
	(let ((key (car keylist)))
	  (if (single-pair? keylist)
	      (let ((record (assoc key (cdr subtable))))
		(if record
		    (set-cdr! record value)
		    (set-cdr! subtable
			      (cons (cons key value)
				    (cdr subtable))))
		'ok)
	      (let ((new-subtable (assoc key (cdr subtable))))
		(if (not new-subtable)
		    (begin
		      (set! new-subtable (list key))
		      (set-cdr! subtable
				(cons new-subtable
				      (cdr subtable)))))
		(rec (cdr keylist) value new-subtable)))))
      (rec keylist value local-table))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (errorf m "Unknown operation -- TABLE"))))
    dispatch))

3.28
(define (logical-or a b)
  (cond ((= a 1) 1)
	((= b 1) 1)
	(else 0)))
(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ((new-value (logical-or (get-signal a1) (get-signal a2))))
      (after-delay or-gate-delay
		   (lambda () set-signal! output new-value))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)

;<constraint system>


(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a2))
                       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)  
           (process-new-value))
          ((eq? request 'I-lost-my-value) 
           (process-forget-value))
          (else 
           (errorf request "Unknown request -- ADDER"))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)
(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))
(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0)))
           (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? product) (has-value? m1))
           (set-value! m2
                       (/ (get-value product) (get-value m1))
                       me))
          ((and (has-value? product) (has-value? m2))
           (set-value! m1
                       (/ (get-value product) (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (errorf request "Unknown request -- MULTIPLIER"))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)
(define (constant value connector)
  (define (me request)
    (errorf 'request "Unknown request -- CONSTANT"))
  (connect connector me)
  (set-value! connector value me)
  me)
(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (errorf request "Unknown request -- PROBE"))))
  (connect connector me)
  me)
(define (make-connector)
  (let ((value #f) (informant #f) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter
                              inform-about-value
                              constraints))
            ((not (= value newval))
             (errorf (list value newval) "Contradiction"))
            (else 'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant #f)
                 (for-each-except retractor
                                  inform-about-no-value
                                  constraints))
          'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints 
                (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
             (if informant #t #f))
            ((eq? request 'value) value)
            ((eq? request 'set-value!) set-my-value)
            ((eq? request 'forget) forget-my-value)
            ((eq? request 'connect) connect)
            (else (errorf request "Unknown operation -- CONNECTOR"))))
    me))
(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))
(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))


3.33
(define (averager num1 num2 avg)
  (let ((two (make-connector))
	(temp (make-connector)))
    (constant 2 two)
    (multiplier avg two temp)
    (adder num1 num2 temp)))

3.35
(define (squarer a asq)
  (define (square x) (* x x))
  (define (process-new-value)
    (cond
     ((has-value? asq)
      (if (< (get-value asq) 0)
	  (errorf (get-value asq) "square less than 0 -- SQUARER")
	  (set-value! a (sqrt (get-value asq)) me)))
     ((has-value? a)
      (set-value! asq (square (get-value a)) me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! asq me)
    (process-new-value))
  (define (me request)
    (cond
     ((eq? request 'I-have-a-value) (process-new-value))
     ((eq? request 'I-lost-my-value) (process-forget-value))
     (else (errorf request "Unknown request -- SQUARER"))))
  (connect a me)
  (connect asq me)
  me)

3.37
(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
(define (c- x y)
  (let ((z (make-connector)))
    (adder y z x)
    z))
(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))
(define (c/ x y)
  (let ((z (make-connector)))
    (multiplier y z x)
    z))
(define (cv num)
  (let ((z (make-connector)))
    (constant num z)
    z))


#stream implementation
(define the-empty-stream '())
(define (memoize proc)
  (let ((run? #f) (result #f))
    (lambda ()
      (if (not run?)
	  (begin
	    (set! result (proc))
	    (set! run? #t)
	    result)
	  result))))
(define-syntax cons-stream
  (syntax-rules ()
    [(_ a d) (cons a (memoize (delay d)))]))
(define (stream-car st) (car st))
(define (stream-cdr st) (force (cdr st)))
(define (stream-ref st n)
  (if (= n 0)
      (stream-car st)
      (stream-ref (stream-cdr st) (- n 1))))
(define stream-null? null?)
(define (stream-filter f st)
  (if (stream-null? st)
      st
      (if (f (stream-car st))
	  (cons-stream
	   (stream-car st)
	   (stream-filter f (stream-cdr st)))
	  (stream-filter f (stream-cdr st)))))
(define (stream-map proc . argstreams)
  (if (null? (car argstreams))
      the-empty-stream
      (cons-stream
       (apply proc (map stream-car argstreams))
       (apply stream-map
	      (cons proc (map stream-cdr argstreams))))))
(define (stream-flatmap f st)
  (define (delayed-map l-st f st)
    (if (stream-null? l-st)
	(stream-flatmap f st)
	(cons-stream
	 (stream-car l-st)
	 (delayed-map (stream-cdr l-st) f st))))
  (if (stream-null? st)
      '()
      (delayed-map (f (stream-car st)) f (stream-cdr st))))
(define (add-streams . s)
  (apply stream-map (cons + s)))
(define (mul-streams s1 s2)
  (stream-map * s1 s2))
(define (div-streams s1 s2)
  (stream-map / s1 s2))
(define (scale-stream st factor)
  (cons-stream
   (* factor (stream-car st))
   (scale-stream (stream-cdr st) factor)))
(define (partial-sums stream)
    (define psstream
      (cons-stream
        (stream-car stream)
        (add-streams psstream (stream-cdr stream))))
    psstream)
(define (repeat n) (define self (cons-stream n self)) self)
(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream
       (stream-car s1)
       (interleave s2 (stream-cdr s1)))))
(define ones (repeat 1))
(define integers (cons-stream 1 (add-streams integers ones)))
(define (display-stream st until)
  (define (iter st until)
    (cond
     ((stream-null? st))
     ((= until 0) (display "..."))
     (else
      (display (stream-car st))
      (if (not (stream-null? (stream-cdr st))) (display " "))
      (iter (stream-cdr st) (- until 1)))))
  (display "(")
  (iter st until)
  (display ")")
  (newline))


3.51
#stream-map : #stream implementation


# Experiment
(define (mk-count n)
  (let ((cnt n))
    (define (rec)
      (if (< cnt 0)
	  '()
	  (begin
	    (set! cnt (- cnt 1))
	    (cons-stream cnt (rec)))))
    (rec)))
(define a (cons-stream
	   1
	   a))
(define b (cons-stream
	   1
	   (stream-map + b (stream-cdr a))))

#3.53 test - add-streams


3.54
#stream implementations - mul-streams
(define factorials (cons-stream 1 (mul-streams factorials (stream-cdr integers))))

3.55
partial-sums : stream implementation

3.56
(define (merge s1 s2)
    (cond
      ((stream-null? s1) s2)
      ((stream-null? s2) s1)
      (else
        (let ((s1car (stream-car s1))
              (s2car (stream-car s2))
              (m (min (stream-car s1) (stream-car s2))))
          (cons-stream
            (min s1car s2car)
            (merge
              (if (= m s1car) (stream-cdr s1) s1)
              (if (= m s2car) (stream-cdr s2) s2)))))))
#scale-stream : stream implementation
(define S (cons-stream 1 (merge (merge (scale-stream S 2) (scale-stream S 3)) (scale-stream S 5))))

3.59
(define (integrate-series st)
  (div-streams st integers))
(define exp-series (cons-stream 1 (integrate-series exp-series)))
(define cosine-series
  (cons-stream 1 (scale-stream (integrate-series sine-series) -1)))
(define sine-series
  (cons-stream 0 (integrate-series cosine-series)))

3.60
(define (mul-series s1 s2)
  (cons-stream
   (* (stream-car s1) (stream-car s2))
    (add-streams
    (mul-streams (stream-cdr s1) (repeat (stream-car s2)))
    (mul-series s1 (stream-cdr s2)))))

3.61
(define (invert-unit-series st)
  (define self
    (cons-stream
     1
     (scale-stream (mul-series (stream-cdr st) self) -1)))
  self)

3.62
(define (invert-series st)
  (define self
    (cons-stream
     (/ 1 (stream-car st))
     (scale-stream (mul-series (stream-cdr st) self) (/ -1 (stream-car st)))))
  self) ;mark 1

(define (invert-series st)
  (let ((factor (/ 1 (stream-car st))))
    (scale-stream (invert-unit-series (scale-stream st factor)) factor))) ;new one
(define (div-series s1 s2)
  (if (= (stream-car s2) 0)
      (errorf 'div-series "Dividing series not valid")
      (mul-series s1 (invert-series s2))))

3.64
(define (stream-limit st tolerance)
  (let ((x1 (stream-car st))
	(x2 (stream-ref st 1)))
    (if (< (abs (- x1 x2)) tolerance)
	x2
	(stream-limit (stream-cdr st) tolerance))))

#accel series
(define (square x) (* x x))
(define (euler-transform s)
  (let ((s0 (stream-ref s 0))
	(s1 (stream-ref s 1))
	(s2 (stream-ref s 2)))
    (cons-stream (- s2 (/ (square (- s2 s1))
			  (+ s0 (* -2 s1) s2)))
		 (euler-transform (stream-cdr s)))))
(define (make-tableau transform s)
  (cons-stream s
	       (make-tableau transform (transform s))))
(define (accelerated-sequence transform s)
  (stream-map stream-car (make-tableau transform s)))

3.65
(define (ln2-summands n)
  (cons-stream
   (/ 1.0 n)
   (scale-stream (ln2-summands (+ n 1)) -1)))
(define ln2-stream
  (partial-sums (ln2-summands 1)))

#3.66~3.68
#interleave : stream implementation
(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
		(stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))
(define int-pairs (pairs integers integers))
(define (prime? n)
  (define (iter cur n rn)
    (cond
     ((< rn cur) #t)
     ((= (remainder n cur) 0) #f)
     (else (iter (+ 1 cur) n rn))))
  (iter 2 n (sqrt n)))
(define prime-sum-stream
  (stream-filter (lambda (pair)
		   (prime? (+ (car pair) (cadr pair))))
		 int-pairs))

3.67
(define all-int-pairs
  (interleave
   int-pairs
   (stream-map
    (lambda (pair) (list (cadr pair) (car pair)))
    (stream-filter
     (lambda (pair) (< (car pair) (cadr pair)))
     int-pairs))))

3.68 - inf_loop!

#porting 2.41
#stream-implementation : stream-flatmap
(define (interval-stream m n)
  (if (< n m)
      '()
      (cons-stream
       m
       (interval-stream (+ m 1) n))))
(define (stream-unique-list n len)
  (if (= len 1)
      (stream-map list (interval-stream 1 n))
      (stream-flatmap
       (lambda (ulist)
	 (stream-map
	  (lambda (x) (cons x ulist))
	  (stream-filter
	   (lambda (obj) (not (member obj ulist)))
	   (interval-stream 1 n))))
       (stream-unique-list n (- len 1)))))
(define (triples s t u) )

3.69
(define (cons-all target atom)
  (if (null? target)
      '()
      (cons (cons atom (car target)) (cons-all (cdr target) atom))))
(define (lazy-append st)
  (define (lazy-iter lst st)
    (if (null? lst)
	(lazy-append st)
	(cons-stream
	 (car lst)
	 (lazy-iter (cdr lst) st))))
  (if (stream-null? st)
      '()
      (lazy-iter (stream-car st) (stream-cdr st))))
(define (partial-append st)
  (define self
    (cons-stream
     (stream-car st)
     (stream-map append self (stream-cdr st))))
  self)
(define (soap . sts)
  (define (iter prev sts)
    (if (null? sts)
	(lazy-append prev)
	(let ((cur (car sts))
	      (rest (cdr sts)))
	  (iter (stream-map cons-all (partial-append prev) cur)
		rest))))
  (iter (stream-map list (stream-map list (car sts))) (cdr sts)))
(define triples
  (stream-map reverse (soap integers integers integers)))
(define (square x) (* x x))
(define pyt-triple
  (stream-filter
   (lambda (lst)
     (= (square (caddr lst))
	(+ (square (cadr lst))
	   (square (car lst)))))
   triples))

3.70
(define (merge-weighted s1 s2 weight)
  (define (w< v1 v2)
    (< (weight v1) (weight v2)))
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (else
         (let ((s1car (stream-car s1))
               (s2car (stream-car s2)))
           (cond ((w< s1car s2car)
                  (cons-stream s1car (merge-weighted (stream-cdr s1) s2 weight)))
                 (else
                  (cons-stream s2car (merge-weighted s1 (stream-cdr s2) weight))))))))
(define (weighted-pairs s t weight)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (merge-weighted
    (stream-map (lambda (x) (list (stream-car s) x))
		(stream-cdr t))
    (weighted-pairs (stream-cdr s) (stream-cdr t) weight)
    weight)))
(define a (weighted-pairs integers integers (lambda (x) (apply + x))))
(define res-int
  (stream-filter
   (lambda (x)
     (not (or (= (remainder x 2) 0)
	      (= (remainder x 3) 0)
	      (= (remainder x 5) 0))))
   integers))
(define b (weighted-pairs res-int res-int
			  (lambda (x)
			    (let ((i (car x))
				  (j (cadr x)))
			      (+ (* 2 i) (* 3 j) (* 5 i j))))))

3.71
(define (sum-cube i j)
  (+ (* i i i) (* j j j)))
(define (scube-lst x)
  (apply sum-cube x))
(define potential-ramanuzan
  (weighted-pairs integers integers
		  scube-lst))
(define ramanuzan
  (stream-map
   (lambda (x) (scube-lst (car x)))
   (stream-filter (lambda (x)
		    (= (scube-lst (car x))
		       (scube-lst (cdr x))))
		  (stream-map cons
			      (stream-cdr potential-ramanuzan)
			      potential-ramanuzan))))
(display-stream ramanuzan 5) ;voila!

3.72
(define (sum-square i j)
  (+ (* i i) (* j j)))
(define (ssq-lst lst)
  (apply sum-square lst))
(define culi
  (weighted-pairs integers integers ssq-lst))
(define squaring
  (stream-map
   (lambda (x) (ssq-lst (car x)))
   (stream-filter (lambda (x)
		    (apply = (map ssq-lst x)))
		  (stream-map list
			      (stream-cdr (stream-cdr culi))
			      (stream-cdr culi)
			      culi))))

#3.73~3.74
(define (integral integrand initial-value dt)
  (define int
    (cons-stream initial-value
		 (add-streams (scale-stream integrand dt)
			      int)))
  int)

3.73
(define (RC R C dt)
  (lambda (i v0)
    (add-streams
     (repeat v0)
     (scale-stream (integral i 0 dt) (/ 1 C))
     (scale-stream i R))))

3.74
(define zero-crossings
  (stream-map sign-change-detector sense-data (cons-stream 0 sense-data)))

3.75
(define (make-zero-crossings input-stream last-value)
  (let ((avpt (/ (+ (stream-car input-stream) last-value) 2)))
    (cons-stream (sign-change-detector avpt last-value)
		 (make-zero-crossings (stream-cdr input-stream)
				      (stream-car input-stream)))))

3.76
(define (smooth st) (scale-stream (add-streams st (stream-cdr st)) (/ 1 2)))

(define (make-zero-crossings input-stream last-value)
  (let ((smooth-stream (smooth input-stream)))
    (cons-stream (sign-change-detector (stream-car smooth-stream)
				       last-value)
		 (make-zero-crossings (stream-cdr smooth-stream)
				      (stream-car smooth-stream)))))

3.77
(define (integral delayed-integrand initial-value dt)
  (cons-stream initial-value
	       (let ((integrand (force delayed-integrand)))
		 (if (stream-null? integrand)
		     the-empty-stream
		     (integral (delay (stream-cdr integrand))
			       (+ (* dt (stream-car integrand))
				  initial-value)
			       dt)))))
(define (solve f y0 dt)
  (define (y) (integral (delay (dy)) y0 dt))
  (define (dy) (stream-map f (y)))
  (y))
(stream-ref (solve (lambda (y) y) 1 0.001) 1000)

3.78
(define (solve-2nd y0 dy0 a b dt)
  (define (y) (integral (dy) y0 dt))
  (define (dy) (delay (integral (ddy) dy0 dt)))
  (define (ddy) (delay (add-streams (scale-stream (force (dy)) a) (scale-stream (y) b))))
  (y))
(stream-ref (solve-2nd 0 1 0 -1 0.01) 314)


(define (solve-2nd y0 dy0 a b dt)
  (define dy (delay (integral ddy dy0 dt)))
  (define ddy (delay (add-streams (scale-stream (force dy) a) (scale-stream y b))))
  (define y (integral dy y0 dt))
  y)

3.79
(define (solve-2nd f y0 dy0 dt)
  (define dy (delay (integral ddy dy0 dt)))
  (define ddy (delay (stream-map f dy y)))
  (define y (integral dy y0 dt))
  y)


3.80
(define (RLC R L C dt)
  (lambda (Vc0 iL0)
    (define Vc
      (delay (integral dVc Vc0 dt)))
    (define dVc
      (delay (scale-stream (force iL) (/ -1 C))))
    (define iL
      (delay (integral diL iL0 dt)))
    (define diL
      (delay (add-streams
	      (scale-stream (force Vc) (/ 1 L))
	      (scale-stream (force iL) (/ (- R) L)))))
    (cons (force Vc) (force iL))))
(define rlc1 ((RLC 1 1 0.2 0.1) 10 0))

3.81
(define (generate C A X) (list C A (mod (+ (* A X) C) C)))
(define (make-reset-value C A X)
  (lambda (m n o) (list C A X)))
(define (build-randstream input-stream)
  (define randstat-stream
    (cons-stream (list 127 50 64)
		 (stream-map apply input-stream randstat-stream)))
  (stream-map (lambda (x) (caddr x)) randstat-stream))

3.82
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (random-range-stream low high)
  (stream-map random-in-range (repeat low) (repeat high)))
(define (monte-integral P x1 x2 y1 y2)
  (define xs (random-range-stream x2 x1))
  (define ys (random-range-stream y2 y1))
  (define succeeded? (stream-map (lambda (x y) (if (P x y) 1 0)) xs ys))
  (define successes (partial-sums succeeded?))
  (scale-stream (div-streams successes integers) (* (- x1 x2) (- y1 y2))))
(define (circle x y) (< (+ (* x x) (* y y)) 9))
(define pis (scale-stream (monte-integral circle 10.0 -5.0 4.0 -6.0) (/ 1 9)))
