3.1
(define (make-accumulator lsum)
  (lambda (x)
    (set! lsum (+ lsum x))
    lsum))
3.2
(define (make-monitored f)
  (let ((count 0))
    (lambda (x)
     (cond ((eq? x 'how-many-calls?) count)
	   ((eq? x 'reset-count) (set! count 0))
	   (else
	    (set! count (+ count 1))
	    (f x))))))

3.3
(define (make-account pw balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch pw2 m)
    (if (eq? pw pw2)
	(cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (display "Unknown request -- MAKE-ACCOUNT")))
	(display "Incorrect password")))
  dispatch)

3.5
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (estimate-integral p x1 x2 y1 y2 trials) ;use float for accuracy
  (define (randsq)
    (cons (random-in-range x2 x1) (random-in-range y2 y1)))
  (define (iter trials-left passed)
    (if (= trials-left 0)
	passed
	(let ((point (randsq)))
	  (iter (- trials-left 1)
		(if (p (car point) (cdr point))
		    (+ passed 1)
		    passed)))))
  (define (sq-size)
    (* (- x1 x2) (- y1 y2)))
  (* (sq-size) (/ (iter trials 0) trials))
  )
(define (sq x) (* x x))
(define (some-circle x y)
  (<= (+ (sq (- x 5)) (sq (- y 7))) 9))

3.6
(define (rand option)
  (cond ((eq? option 'generate) random)
	((eq? option 'reset) random-seed)))

3.7
(define (make-joint account prevpw newpw)
  (let ((withdraw (account prevpw 'withdraw))
	(deposit (account prevpw 'deposit)))
    (if (null? withdraw)
	(display "Password Incorrect")
	(lambda (pw m)
	  (if (eq? pw newpw)
	      (cond ((eq? m 'withdraw) withdraw)
		    ((eq? m 'deposit) deposit)
		    (else (display "Unknown request -- Make-account")))
	      (display "Incorrect Password"))))))

3.8
(define local 1)
(define (f x)
  (set! local (* local x))
  local)


#3.14 - reverse!

3.17
(define (count-pairs x)
    (define (exist? p pairs)
      (if (null? pairs)
          #f
          (or (eq? p (car pairs)) (exist? p (cdr pairs)))))
    (define (register p pairs)
      (if (exist? p pairs)
          pairs
          (cons p pairs)))
    (define (iter x pairs)
      (if (pair? x)
          (if (exist? x pairs)
              pairs
              (iter (car x) (iter (cdr x) (register x pairs))))
          pairs))
    (length (iter x '())))

3.18
#이용한 루프 제조기
(define (make-loop lis)
    (define (iter rest)
      (if (null? (cdr rest))
          (set-cdr! rest lis)
          (iter (cdr rest))))
    (iter lis))

#w/ state
(define (looped? x)
    (define dummy '())
    (cond
      ((eq? x 'visited) #t)
      ((pair? x)
       (set! dummy (cdr x))
       (set-cdr! x 'visited)
       (let ((result (looped? dummy)))
         (set-cdr! x dummy)
         result))
      (else #f)))

3.19
(define (looped? x)
    (define (safe-cdr x)
      (if (pair? x)
          (cdr x)
          '()))
    (define (iter slow fast)
      (cond
        ((null? fast) #f)
        ((eq? slow fast) #t)
        (else (iter (safe-cdr slow) (safe-cdr (safe-cdr fast))))))
    (iter x (safe-cdr x)))

3.21