3.1
(define (make-accumulator lsum)
  (lambda (x)
    (set! lsum (+ lsum x))
    lsum))
3.2
(define (make-monitored f)
  (let ((count 0))
    (lambda (x)
     (cond ((eq? x 'how-many-calls?) count)
	   ((eq? x 'reset-count) (set! count 0))
	   (else
	    (set! count (+ count 1))
	    (f x))))))

3.3
(define (make-account pw balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch pw2 m)
    (if (eq? pw pw2)
	(cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (display "Unknown request -- MAKE-ACCOUNT")))
	(display "Incorrect password")))
  dispatch)

3.5
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (estimate-integral p x1 x2 y1 y2 trials) ;use float for accuracy
  (define (randsq)
    (cons (random-in-range x2 x1) (random-in-range y2 y1)))
  (define (iter trials-left passed)
    (if (= trials-left 0)
	passed
	(let ((point (randsq)))
	  (iter (- trials-left 1)
		(if (p (car point) (cdr point))
		    (+ passed 1)
		    passed)))))
  (define (sq-size)
    (* (- x1 x2) (- y1 y2)))
  (* (sq-size) (/ (iter trials 0) trials))
  )
(define (sq x) (* x x))
(define (some-circle x y)
  (<= (+ (sq (- x 5)) (sq (- y 7))) 9))

3.6
(define (rand option)
  (cond ((eq? option 'generate) random)
	((eq? option 'reset) random-seed)))

3.7
(define (make-joint account prevpw newpw)
  (let ((withdraw (account prevpw 'withdraw))
	(deposit (account prevpw 'deposit)))
    (if (null? withdraw)
	(display "Password Incorrect")
	(lambda (pw m)
	  (if (eq? pw newpw)
	      (cond ((eq? m 'withdraw) withdraw)
		    ((eq? m 'deposit) deposit)
		    (else (display "Unknown request -- Make-account")))
	      (display "Incorrect Password"))))))

3.8
(define local 1)
(define (f x)
  (set! local (* local x))
  local)


#3.14 - reverse!

3.17
(define (count-pairs x)
    (define (exist? p pairs)
      (if (null? pairs)
          #f
          (or (eq? p (car pairs)) (exist? p (cdr pairs)))))
    (define (register p pairs)
      (if (exist? p pairs)
          pairs
          (cons p pairs)))
    (define (iter x pairs)
      (if (pair? x)
          (if (exist? x pairs)
              pairs
              (iter (car x) (iter (cdr x) (register x pairs))))
          pairs))
    (length (iter x '())))

3.18
#이용한 루프 제조기
(define (make-loop lis)
    (define (iter rest)
      (if (null? (cdr rest))
          (set-cdr! rest lis)
          (iter (cdr rest))))
    (iter lis))

#w/ state
(define (looped? x)
    (define dummy '())
    (cond
      ((eq? x 'visited) #t)
      ((pair? x)
       (set! dummy (cdr x))
       (set-cdr! x 'visited)
       (let ((result (looped? dummy)))
         (set-cdr! x dummy)
         result))
      (else #f)))

3.19
(define (looped? x)
    (define (safe-cdr x)
      (if (pair? x)
          (cdr x)
          '()))
    (define (iter slow fast)
      (cond
        ((null? fast) #f)
        ((eq? slow fast) #t)
        (else (iter (safe-cdr slow) (safe-cdr (safe-cdr fast))))))
    (iter x (safe-cdr x)))

3.23
(define (make-deque) (cons '() '()))
(define (single-deque? x) (eq? (front-deque x) (rear-deque x)))
(define (front-deque x) (car x))
(define (rear-deque x) (cdr x))
(define (empty-deque? x) (null? (front-deque x)))
(define (front-insert-deque! x item)
    (let ((new-pair (cons item '())))
      (if (empty-deque? x)
          (assoc-deque! x new-pair)
          (begin
            (set-cdr! new-pair (car x))
            (set-front-ptr! x new-pair)
            x))))
(define (rear-insert-deque! x item)
    (let ((new-pair (cons item '())))
      (if (empty-deque? x)
          (assoc-deque! x new-pair)
          (begin
            (set-cdr! (rear-deque x) new-pair)
            (set-rear-ptr! x new-pair)
            x))))
(define (assoc-deque! x pair)
    (set-front-ptr! x pair)
    (set-rear-ptr! x pair)
    x)
 (define (rear-insert-deque! x item)
      (let ((new-pair (cons item '())))
        (if (empty-deque? x)
            (assoc-deque! x new-pair)
            (begin
              (set-cdr! (rear-deque x) new-pair)
              (set-rear-ptr! x new-pair)
              x))))
(define (front-insert-deque! x item)
    (let ((new-pair (cons item '())))
      (if (empty-deque? x)
          (assoc-deque! x new-pair)
          (begin
            (set-cdr! new-pair (car x))
            (set-front-ptr! x new-pair)
            x))))
(define (front-delete-deque! x)
    (if (single-deque? x)
        (make-deque)
        (begin
          (set-front-ptr! x (cdr (front-deque x)))
          x)))
(define (rear-delete-deque! x)
    (if (single-deque? x)
        (make-deque)
        (begin
          (let ((new-end (find-pre-rear x)))
            (set-cdr! new-end '())
            (set-rear-ptr! x new-end)
            x))))
(define (print-deque x)
    (display (front-deque x)))
(define (set-front-ptr! x item) (set-car! x item))
(define (set-rear-ptr! x item) (set-cdr! x item))
(define (find-pre-rear x)
    (define (iter rear list)
      (if (eq? (cdr list) rear)
          list
          (iter rear (cdr list))))
    (if (single-deque? x)
        (errorf 'find-pre-rear "Cannot Use in single pair deque")
        (iter (rear-deque x) (front-deque x))))

3.24
(define (make-table same-key?)
    (let ((local-table (list '*table*)))
      (define (assoc key records)
        (cond
          ((null? records) #f)
          ((same-key? key (caar records)) (car records))
          (else (assoc key (cdr records)))))
      (define (lookup key-1 key-2)
        (let ((subtable (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record (assoc key-2 (cdr subtable))))
                (if record
                    (cdr record)
                    #f))
              #f)))
      (define (insert! key-1 key-2 value)
        (let ((subtable (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record (assoc key-2 (cdr subtable))))
                (if record
                    (set-cdr! record value)
                    (set-cdr! subtable
                              (cons (cons key-2 value)
                                    (cdr subtable)))))
              (set-cdr! local-table
                        (cons (list key-1
                                    (cons key-2 value))
                              (cdr local-table)))))
        'ok)
      (define (dispatch m)
        (cond ((eq? m 'lookup-proc) lookup)
              ((eq? m 'insert-proc!) insert!)
              (else (errorf m "Unknown operation -- TABLE"))))
      dispatch))

3.25
(define (make-table same-key?)
  (let ((local-table (list '*table*)))
    (define (single-pair? pair)
      (null? (cdr pair)))
    (define (safe-cdr pair)
      (if (pair? pair) (cdr pair) pair))
    (define (assoc key records)
      (cond
       ((null? records) #f)
       ((same-key? key (caar records)) (car records))
       (else (assoc key (cdr records)))))
    (define (lookup keylist)
      (define (rec keylist subtable)
	(let ((key (car keylist)))
	  (if (single-pair? keylist)
	      (safe-cdr (assoc key (cdr subtable)))
	      (let ((new-subtable (assoc key (cdr subtable))))
		(if new-subtable
		    (rec (cdr keylist) new-subtable)
		    #f)))))
      (rec keylist local-table))
    (define (insert! keylist value)
      (define (rec keylist value subtable)
	(let ((key (car keylist)))
	  (if (single-pair? keylist)
	      (let ((record (assoc key (cdr subtable))))
		(if record
		    (set-cdr! record value)
		    (set-cdr! subtable
			      (cons (cons key value)
				    (cdr subtable))))
		'ok)
	      (let ((new-subtable (assoc key (cdr subtable))))
		(if (not new-subtable)
		    (begin
		      (set! new-subtable (list key))
		      (set-cdr! subtable
				(cons new-subtable
				      (cdr subtable)))))
		(rec (cdr keylist) value new-subtable)))))
      (rec keylist value local-table))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (errorf m "Unknown operation -- TABLE"))))
    dispatch))

3.28
(define (logical-or a b)
  (cond ((= a 1) 1)
	((= b 1) 1)
	(else 0)))
(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ((new-value (logical-or (get-signal a1) (get-signal a2))))
      (after-delay or-gate-delay
		   (lambda () set-signal! output new-value))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)

3.
