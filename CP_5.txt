5.2
(controller
    (assign cnt (const 1))
 test-cnt
    (test (op >) (reg cnt) (reg n))
    (branch (label fac-done))
    (assign prod (op *) (reg cnt) (reg prod))
    (assign cnt (op ++) (reg cnt))
    (goto (label test-cnt)) 
 fac-done)

5.3
(controller
    (assign (reg x) (op read))
    (assign (reg guess) (const 1.0))
 sqrt-loop
    (assign sq-g (op square) (reg guess))
    (assign tmp (op -) (reg sq-g) (reg x))
    (assign tmp (op abs) (reg tmp))
    (test (op <) (reg tmp) (const 0.001))
    (branch (label sqrt-done))
    (assign tmp (op /) (reg x) (reg guess))
    (assign guess (op average) (reg guess) (reg tmp))
    (goto sqrt-loop)
 sqrt-done
    (perform (op print) (reg guess))
)
5.4
(controller
    (assign continue (label expt-done))
 exp-loop
    (test (op =) (reg n) (const 1))
    (branch (label base-case))
    (save continue)
    (assign continue (label expt))
    (assign n (op -) (reg n) (reg 1))
    (goto (label exp-loop))
 expt
    (restore continue)
    (assign val (op *) (reg val) (reg b))
    (goto (reg continue))
 base-case
    (assign val (const 1))
    (goto (reg continue))
 expt-done
)
(controller
    (assign prod (const 1))
 exp-loop
    (test (op =) (reg n) (const 0))
    (branch (label end-expt))
    (assign n (op -) (reg n) (reg 1))
    (assign prod (op *) (reg prod) (reg b))
    (goto (label exp-loop))
 end-expt)
5.5;That was a labor
5.6
;after-fib restore/save continue
5.7
;5.2
(define fac-machine
  (make-machine
   '(cnt n prod)
   (list (list '* *)
	 (list '++ (lambda (x) (+ x 1)))
	 (list '> >))
   '((assign cnt (const 1))
     (assign prod (const 1))
     test-cnt
     (test (op >) (reg cnt) (reg n))
     (branch (label fac-done))
     (assign prod (op *) (reg cnt) (reg prod))
     (assign cnt (op ++) (reg cnt))
     (goto (label test-cnt)) 
     fac-done)))
(set-register-contents! fac-machine 'n 5)
(start fac-machine)
(get-register-contents fac-machine 'prod)

;;;5.4
(define expt-rec-machine
  (make-machine
   '(n b continue val)
   (list (list '= =) (list '- -) (list '* *))
   '((assign continue (label expt-done))
     exp-loop
     (test (op =) (reg n) (const 0))
     (branch (label base-case))
     (save continue)
     (assign continue (label expt))
     (assign n (op -) (reg n) (const 1))
     (goto (label exp-loop))
     expt
     (restore continue)
     (assign val (op *) (reg val) (reg b))
     (goto (reg continue))
     base-case
     (assign val (const 1))
     (goto (reg continue))
     expt-done)))
(set-register-contents! expt-rec-machine 'n 3)
(set-register-contents! expt-rec-machine 'b 5)
(start expt-rec-machine)
(get-register-contents expt-rec-machine 'val)

(define expt-iter-machine
  (make-machine
   '(n b prod)
   (list (list '= =) (list '- -) (list '* *))
   '((assign prod (const 1))
     exp-loop
     (test (op =) (reg n) (const 0))
     (branch (label end-expt))
     (assign n (op -) (reg n) (const 1))
     (assign prod (op *) (reg prod) (reg b))
     (goto (label exp-loop))
     end-expt)))
(set-register-contents! expt-iter-machine 'n 3)
(set-register-contents! expt-iter-machine 'b 5)
(start expt-iter-machine)
(get-register-contents expt-iter-machine 'prod)

5.8
(define (extract-labels text receive)
  (if (null? text)
      (receive '() '())
      (extract-labels (cdr text)
       (lambda (insts labels)
         (let ((next-inst (car text)))
           (if (symbol? next-inst)
	       (if (memq next-inst (map car labels))
		   (errorf 'extract-labels "Duplicate Label : ~s"
			   next-inst)
		   (receive insts
                       (cons (make-label-entry next-inst
                                               insts)
                             labels)))
               (receive (cons (make-instruction next-inst)
                              insts)
                        labels)))))))

5.9
(define (make-operation-exp exp machine labels operations)
  (if (memq 'label (map car exp))
   (errorf 'make-operation-exp "Label cannot be used in ops ~% ~s" exp)
   (let ((op (lookup-prim (operation-exp-op exp) operations))
         (aprocs
          (map (lambda (e)
                 (make-primitive-exp e machine labels))
               (operation-exp-operands exp))))
     (lambda ()
       (apply op (map (lambda (p) (p)) aprocs))))))
       

5.10
;;;;had to modify extract-labels
;;;;can also use (label <label>) instead of just <label>
(define (maybe-label inst)
  (if (and (pair? inst) (eq? 'label (car inst)))
      (cadr inst) ; (label smth) -> smth
      inst))
(define (extract-labels text receive)
  (if (null? text)
      (receive '() '())
      (extract-labels (cdr text)
       (lambda (insts labels)
         (let ((next-inst (maybe-label (car text))))
           (if (symbol? next-inst)
	       (if (memq next-inst (map car labels))
		   (errorf 'extract-labels "Duplicate Label : ~s"
			   next-inst)
		   (receive insts
                       (cons (make-label-entry next-inst
                                               insts)
                             labels)))
               (receive (cons (make-instruction next-inst)
                              insts)
                   labels)))))))

5.11
;;;a
afterfib-n-2
(restore n)
(restore continue)
(assign val (op +) (reg val) (reg n))
(goto (reg continue))
;;;b
(define (make-save inst machine stack pc)
  (let ((reg (get-register machine
                           (stack-inst-reg-name inst))))
    (lambda ()
      (push stack (cons reg (get-contents reg)))
      (advance-pc pc))))
(define (make-restore inst machine stack pc)
  (let ((reg (get-register machine
                           (stack-inst-reg-name inst))))
    (lambda ()
      (let ((out (pop stack)))
	(if (eq? (car out) reg)
	    (set-contents! reg (cdr out))
	    (errorf 'restore "Restoring Destination Differ")))    
      (advance-pc pc))))
;;;c
;;;Used hashmap instead. EFF
(define (make-stack)
  (let ((st-table (make-hash-table)))
    (define (push x reg)
      (let ((s (get-hash-table st-table reg #f)))
	(if s
	    (put-hash-table! st-table reg (cons x s))
	    (put-hash-table! st-table reg (list x)))))
    (define (pop reg)
      (let ((s (get-hash-table st-table reg '())))
	(if (null? s)
            (errorf 'stack "Empty stack -- POP")
            (let ((top (car s)))
              (put-hash-table! st-table reg (cdr s))
              top))))
    (define (initialize)
      (set! s '())
      'done)
    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) pop)
            ((eq? message 'initialize) (initialize))
            (else (errorf 'STACK "Unknown request: ~s"
                         message))))
    dispatch))
(define (pop stack reg)
  ((stack 'pop) reg))
(define (push stack value reg)
  ((stack 'push) value reg))
(define (make-save inst machine stack pc)
  (let ((reg (get-register machine
                           (stack-inst-reg-name inst))))
    (lambda ()
      (push stack (get-contents reg) (stack-inst-reg-name inst))
      (advance-pc pc))))
(define (make-restore inst machine stack pc)
  (let ((reg (get-register machine
                           (stack-inst-reg-name inst))))
    (lambda ()
      (set-contents! reg (pop stack (stack-inst-reg-name inst)))    
      (advance-pc pc))))
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '()))
    (let ((the-ops
           (list (list 'initialize-stack
            (lambda () (stack 'initialize)))
      (list 'print-stack-statistics
            (lambda () (stack 'print-statistics)))))
          (register-table
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (errorf 'allocate-register "Multiply defined register: ~s" name)
            (set! register-table
                  (cons (list name (make-register name))
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (errorf 'lookup-register "Unknown register: ~s" name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              (else (errorf 'Machine "Unknown request: ~s" message))))
      dispatch)))

5.12

(define (assemble controller-text machine)
  (define (ops)
    (extract-labels controller-text
		    (lambda (insts labels)
		      (update-insts! insts labels machine)
		      insts)))
  (define (infos)
    (define (sort-unique lst) lst)
    (list
     (sort-unique (filter (lambda (x)
			    (and (pair? x)
				 (not (eq? (car x) 'label))))
			  controller-text))
     (sort-unique
      (map cadr
	   (filter (lambda (x) (eq? (car x) 'reg))
		   (map cadr
			(filter (lambda (x) (eq? (car x) 'goto))
				controller-text)))))
     (sort-unique
      (map cadr
	   (filter (lambda (x) (or (eq? (car x) 'save)
				   (eq? (car x) 'load)))
		   controller-text)))
     (sort-unique
      (map cddr
	   (filter (lambda (x) (and (pair? x)
				    (eq? (car x) 'assign)))
		   controller-text)))))
  (cons (infos) (ops)))
;;Makenewmachine
((eq? message 'install-instruction-sequence)
               (lambda (infoinst)
		 (let ((info (car infoinst))
		       (seq (cdr infoinst)))
		   (set! inst-info info)
		   (set! the-instruction-sequence seq))))
((eq? message 'instructions-info) inst-info)
;;Makenewmachine


5.13

(define (make-machine ops controller-text)
  (let ((machine (make-new-machine)))
    ((machine 'install-operations) ops)    
    ((machine 'install-instruction-sequence)
     (assemble controller-text machine))
    machine))
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '()))
    (let ((the-ops
           (list (list 'initialize-stack
            (lambda () (stack 'initialize)))
      (list 'print-stack-statistics
            (lambda () (stack 'print-statistics)))))
          (register-table
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (errorf 'allocate-register "Multiply defined register: ~s" name)
            (set! register-table
                  (cons (list name (make-register name))
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (begin
		(allocate-register name)
		(lookup-register name)))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq)
		 (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              (else (errorf 'Machine "Unknown request: ~s" message))))
      dispatch)))

5.14
(define recfact
  (make-machine
   '(n val continue)
   (list (list '= =) (list '- -) (list '* *))
   '((perform (op initialize-stack))
     (assign continue (label fact-done))     
     fact-loop
     (test (op =) (reg n) (const 1))
     (branch (label base-case))
     (save continue)
     (save n)
     (assign n (op -) (reg n) (const 1))
     (assign continue (label after-fact))
     (goto (label fact-loop))
     after-fact
     (restore n)
     (restore continue)
     (assign val (op *) (reg n) (reg val))   
     (goto (reg continue))               
     base-case
     (assign val (const 1))              
     (goto (reg continue))        
     fact-done
     (perform (op print-stack-statistics)))))
(do ((n 1 (+ n 1)))
    ((= n 10) 'done&done)
  (display (format "~%n = ~s ~%~%" n))
  (set-register-contents! recfact 'n n)
  (start recfact)
  (get-register-contents recfact 'val)) ; total/max = 2n-2

~5.19: Register_Machine*.scm

5.20 ;;free p3 x p1 y p2

5.21
;;;a ## tree on (reg search)
(controller
 (assign continue (label end-count-leaves))
 rec-search
 (test (op null?) (reg search))
 (branch (label just-zero))
 (test (op pair?) (reg search))
 (branch (label rec-pair))
 (goto (label just-one))
 rec-pair
 (save continue);->
 (save search)
 (assign search (op car) (reg search))
 (assign continue (label rec-after-car))
 (goto (label rec-search))
 rec-after-car
 (load search)
 (assign search (op cdr) (reg search))
 (save val);car
 (assign continue (label rec-after-cdr))
 (goto (label rec-search))
 rec-after-cdr
 (load sum);car val
 (load continue);<-
 (assign val (op +) (reg sum) (reg val))
 (goto (reg continue))
 just-one
 (assign val (const 1))
 (goto (reg continue))
 just-zero
 (assign val (const 0))
 (goto (reg continue))
 end-count-leaves)
;;;b
(controller
 (assign continue (label end-count-leaves))
 (assign n (const 0))
 ct-iter
 (test (op null?) (reg search))
 (branch (label n))
 (test (op pair?) (reg search))
 (branch (label pair))
 (goto (label n+1))
 pair
 (save continue)
 (save search)
 (assign continue (label after-car))
 (assign search (op car) (reg search))
 (goto (label ct-iter))
 after-car
 (load search)
 (load continue)
 (assign n (reg val))
 (assign search (cdr search))
 (goto (label ct-iter))
 n
 (assign val (reg n))
 (goto (reg continue))
 n+1
 (assign val (op +) (reg n) (const 1))
 (goto (reg continue))
 end-count-leaves)

5.22
;;;append!
(controller
 (save la)
 append-loop
 (assign aft (op cdr) (reg la))
 (test (op null?) (reg aft))
 (branch (label append-loop))
 (assign la (reg aft))
 (goto (label append-it))
 append-it
 (perform (op set-cdr!) (reg la) (reg lb))
 (load aft))
;;;append - result on lb, la + lb
(controller
 (assign continue (label end-append))
 append-loop-down
 (test (op null?) (reg la))
 (branch (reg continue))
 (assign atom (op car) (reg la))
 (assign la (op cdr) (reg la))
 (save atom)
 (save (reg continue))
 (assign continue (label append-loop-up))
 (goto (label append-loop-down))
 append-loop-up
 (load atom)
 (load continue)
 (assign (reg lb) (op cons) (reg atom) (reg lb))
 (goto (reg continue))
 end-append)

5.23
;;;eval-dispatch
(test (op cond?) (reg exp))
(branch (label ev-cond))
;;;ev-cond
ev-cond
(assign exp (op cond->if) (reg exp))
(goto (label eval-dispatch))

5.24
;;;eval-dispatch
(test (op cond?) (reg exp))
(branch (label ev-cond))
;;;ev-cond
ev-cond
(assign unev (op cond-exps) (reg exp))
(save continue)
(goto (label ev-cond-exps))
ev-cond-exps
(assign exp (op first-exp) (reg unev))
(assign val (op cond-pred) (reg exp));temp for else?
(test (op else?) (reg val));dont care even if 'else is not last
(branch (label cond-if-consequent))
(save unev)
(save env)
(save exp)
(assign exp (op cond-pred) (reg exp))
(assign continue (label ev-cond-decide))
ev-cond-decide
(load exp)
(load env)
(load unev)
(test (op true?) (reg val))
(branch (label cond-if-consequent))
(test (op last-exp?) (reg unev))
(branch (label ev-cond-last-exp))
(goto (label cond-if-not))
cond-if-consequent
(assign exp (op cond-conseq) (reg exp))
(load continue)
(goto (label eval-dispatch))
cond-if-not
(assign unev (op rest-exps) (reg unev))
(goto (label ev-cond-exps))
ev-cond-last-exp
(assign val (const #f));no match
(load continue)
(goto (reg continue))

5.25
;;; Explicit-Control_Evaluator_lazy.scm

5.26
;;; Working_Explicit-control_Evaluator.scm
;;Max : 32n - 16
;;# of pushes : 5n + 3

5.27
;;     | Max Depth | # of pushes
;;Rec  |  5n + 3   |  32n - 16   
;;Iter |    10     |  35n + 29

5.28
;;     | Max Depth | # of pushes
;;Rec  |  3n + 8   |  34n - 16
;;Iter |  14n + 3  |  37n + 33

5.29
;; Max Depth :   5n + 3
;; # of pushes : s(n-1) + s(n-2) + 40
;;   	         56fib(n+1) - 40


;;;;;;;;;;;;;;;;

5.31 ;;CHECK

5.32
;;a
ev-application
(save continue)
(assign unev (op operands) (reg exp))
(assign exp (op operator) (reg exp))
(test (op symbol?) exp)
(goto (label just-symbol))
(save unev)
(save env)
(assign
continue (label ev-appl-did-operator))
(goto (label eval-dispatch))

just-symbol
(assign exp (op lookup-variable-value) (reg exp) (reg env))
(goto (label ev-appl-skip))

ev-appl-did-operator
(restore env)
(restore unev)             ; the operands
ev-appl-skip
(assign argl (op empty-arglist))
(assign proc (reg val))    ; the operator
(test (op no-operands?) (reg unev))
(branch (label apply-dispatch))
(save proc)

;;b
;;That would be horribly slow, continuously checking special cases
;;Some optimization even needs a lot of codes before and after itself

5.33
;;Changes found, but was just a reposition. even amount of save/load action was same

5.34
;;Rec Version calls itself before termination, but Iter version just assigns iter
;;and calls itself again without any leftovers.
;;Iter version is longer than rec version though.

5.35
(define (f x)
  (+ x (g (+ x 2))))

5.36
;;R-to-L in vanila
;;L-to-R version
(define (construct-arglist operand-codes)
  (if (null? operand-codes)
      (make-instruction-sequence
       '() '(argl)
       '((assign argl (const ()))))
      (let ((code-head-arg
	     (append-instruction-sequences
	      (car operand-codes)
	      (make-instruction-sequence
	       '(val) '(argl)
	       '((assign argl (op list) (reg val))))))))
      (code-get-args operand-codes)))
(define (code-get-args operand-codes)
  (let ((cur-arg-code
	 (preserving '(argl)
		     (car operand-codes)
		     (make-instruction-sequence
		      '(val argl) '(argl)
		      '((assign argl (op append) (reg argl) (reg val)))))))
    (if (null? (cdr operand-codes))
	cur-arg-code
	(preserving '(env)
		    cur-arg-code
		    (code-get-args (cdr operand-codes))))))
;;Append is usually an expensive operation, but could be same with implementation of append
;;Could have problems with (read) in vanila though


5.37
;;Modified preserving
(define (preserving regs seq1 seq2)
  (if (null? regs)
      (append-instruction-sequences seq1 seq2)
      (let ((first-reg (car regs)))
        (if (needs-register? seq2 first-reg) 
            (preserving (cdr regs)
             (make-instruction-sequence
              (list-union (list first-reg)
                          (registers-needed seq1))
              (list-difference (registers-modified seq1)
                               (list first-reg))
              (append `((save ,first-reg))
                      (statements seq1)
                      `((restore ,first-reg))))
             seq2)
            (preserving (cdr regs) seq1 seq2)))))
;;;Compiled  (+ 1 2)

((env)
 (env proc argl continue val)
 ((assign
   proc
   (op lookup-variable-value)
   (const +)
   (reg env))
  (save proc);; added
  (assign val (const 2))
  (assign argl (op list) (reg val))
  (save argl);; added
  (assign val (const 1))
  (restore argl);; added
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc);; added
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch62))
  compiled-branch61
  (assign continue (label after-call60))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
  primitive-branch62
  (assign
   val
   (op apply-primitive-procedure)
   (reg proc)
   (reg argl))
  after-call60))


5.38
;;;a
(define (spread-arguments operand-code1 operand-code2)
  (append-instruction-sequences
   operand-code1
   (preserving '(arg1)
	       operand-code2
	       (make-instruction-sequence
		'(arg1) '() '()))))
;;;b
;;Need
(define primitive-compile '(+ - / *))
(define (find-primitive op) op)
(define (primitive-application? exp) (memq (car exp) primitive-compile))
;;cond
((primitive-application? exp)
 (compile-primitive-application exp target linkage))
;;main
(define (compile-primitive-application exp target linkage)
  (let ((operator-code (find-primitive (operator exp)))
	(operand-code1 (compile (car (operands exp)) 'arg1 'next))
	(operand-code2 (compile (cadr (operands exp)) 'arg2 'next)))
    (end-with-linkage
     linkage
     (append-instruction-sequences
      (spread-arguments operand-code1 operand-code2)
      (make-instruction-sequence
       '(arg1 arg2) '(val)
       `((assign val (op ,operator-code) (reg arg1) (reg arg2))))))))


;;;c
   (assign
     arg1
     (op lookup-variable-value)
     (const counter)
     (reg env))
   (assign arg2 (const 1))
   (assign val (op +) (reg arg1) (reg arg2))

;;;d
(define (compile-primitive-application exp target linkage)
  (let ((operator-code (find-primitive (operator exp)))
	(operand-code1 (compile (car (operands exp)) 'arg1 'next))
	(operand-code2 (compile (cadr (operands exp)) 'arg2 'next))
	(rest (cddr (operands exp))))
    (define (compile-prim-n operand-code1 operand-code2 rest)
      (if (null? rest)
	  (append-instruction-sequences
	   (spread-arguments operand-code1 operand-code2)
	   (make-instruction-sequence
	    '(arg1 arg2) '(val)
	    `((assign val (op ,operator-code) (reg arg1) (reg arg2)))))
	  (compile-prim-n
	   (append-instruction-sequences
	    (spread-arguments operand-code1 operand-code2)
	    (make-instruction-sequence
	     '(arg1 arg2) '(arg1)
	     `((assign arg1 (op ,operator-code) (reg arg1) (reg arg2)))))
	   (compile (car rest) 'arg2 'next)
	   (cdr rest))))
    (end-with-linkage
     linkage
     (compile-prim-n operand-code1 operand-code2 rest)
     )))

;;;RESULT - (+ 1 2 3)
((assign arg1 (const 1))
 (assign arg2 (const 2))
 (assign arg1 (op +) (reg arg1) (reg arg2))
 (assign arg2 (const 3))
 (assign val (op +) (reg arg1) (reg arg2)))
;;;RESULT - (+ (+ 1 2 3))
(assign arg1 (const 1))
(save arg1)
(assign arg1 (const 1))
(assign arg2 (const 2))
(assign val (op +) (reg arg1) (reg arg2))
(restore arg1)
(assign arg1 (op +) (reg arg1) (reg arg2))
(assign arg2 (const 3))
(assign val (op +) (reg arg1) (reg arg2))


5.39

(define (lexical-address-lookup addr env)
  (define (lex-search f-ind v-ind env)
    (let* ((frame (list-ref f-ind env))
	   (val (list-ref v-ind frame)))
      (if (eq? val '*unassigned*)
	  (errorf 'lexical-address-lookup
		  "Value unassigned - ~s" addr)
	  val)))
  (lex-search (car addr) (cdr addr) env))

(define (list-pair-ref addr lst)
  (if (= addr 0)
      lst
      (list-pair-ref (- addr 1) (cdr lst))))
(define (lexical-address-set! addr value env)
  (define (lex-search f-ind v-ind env)
    (let* ((frame (list-ref f-ind env))
	   (val-p (list-pair-ref v-ind frame)))
      (set-car! val-p value)))
  (lex-search (car addr) (cdr addr) env))

5.40
(define (extend-penv penv frame) (cons frame penv))
(define (compile-lambda-body exp proc-entry penv)
  (let ((formals (lambda-parameters exp)))
    (append-instruction-sequences
     (make-instruction-sequence '(env proc argl) '(env)
      `(,proc-entry
        (assign env (op compiled-procedure-env) (reg proc))
        (assign env
                (op extend-environment)
                (const ,formals)
                (reg argl)
                (reg env))))
     (compile-sequence (lambda-body exp) 'val 'return
		       (extend-penv penv formals)))))


5.41
(define (find-variable var env)
  (define (locate f-ind v-ind vars env)
    (cond ((null? vars)
	   (if (null? env)
	       'not-found
	       (locate (+ f-ind 1) 0 (car env) (cdr env))))
	  ((eq? (car vars) var)
 	   (cons f-ind v-ind))
	  (else
	   (locate f-ind (+ v-ind 1) (cdr vars) env))))
  (if (null? env) 'not-found (locate 0 0 (car env) (cdr env))))




5.42
(define (compile-variable exp target linkage penv)
  (end-with-linkage
   linkage
   (let ((addr (find-variable exp  penv)))
     (if (eq? addr 'not-found)
	 (make-instruction-sequence
	  '(env) (list target)
	  `((assign ,target
		    (op lookup-variable-value)
		    (const ,exp)
		    (reg env))))
	 (make-instruction-sequence
	  '(env) (list target)
	  `((assign ,target
		    (op lexical-address-lookup)
		    (const ,addr)
		    (reg env))))))))

(define (compile-assignment exp target linkage penv)
  (let ((var (assignment-variable exp))
        (get-value-code
         (compile (assignment-value exp) 'val 'next) penv))
    (end-with-linkage
     linkage
     (preserving
      '(env)
      get-value-code
      (let ((addr (find-variable var penv)))
	(if (eq? var 'not-found)
	    (make-instruction-sequence
	     '(env val) (list target)
	     `((perform (op set-variable-value!)
			(const ,var)
			(reg val)
			(reg env))
               (assign ,target (const ok))))
	    (make-instruction-sequence
	     '(env val) (list target)
	     `((perform (op lexical-address-set!)
			(const ,addr)
			(reg val)
			(reg env))
               (assign ,target (const ok))))))))))

;;;5.43 ;Maybe reuse the code? maybe.

5.44
;;compile modification
((and (primitive-application? exp)
	      (eq? (find-variable (operator exp) 'not-found)))
	 (compile-primitive-application exp target linkage penv))

5.45
;;;a
;;Compiled
;;total pushes : 6n+7
;;maximum depth: 3
;;Interpreted
;;total pushes : 35n+99
;;maximum depth: 10
;;Hand-tailored
;;total pushes : 0
;;maximum depth: 0

;;Interpreted/Compiled = 35/6
;;Cannot say about ratio with hand-tailored version
;;doesnt even uses stack!

;;b - Maybe use surplus registers to keep values
;;    Inline functions
;;    Values as registered.

5.46
;;Compiled
;;Tot.push :10fib(n+1)-3
;;Max.depth:3n-1
;;Interpreted
;;Tot.push :56fib(n+1)-40
;;Max.depth:5n+3
;;Hand-Tailored
;;Tot.push :4fib(n+1)-4
;;Max.depth:2n-2

5.47
(define (compile-procedure-call target linkage)
  (let ((primitive-branch (make-label 'primitive-branch))
        (compiled-branch (make-label 'compiled-branch))
	(compound-branch (make-label 'compound-branch))
	(after-compapp (make-label 'after-compapp))
        (after-call (make-label 'after-call)))
    (let ((compiled-linkage
           (if (eq? linkage 'next) after-call linkage)))
      (append-instruction-sequences
       (make-instruction-sequence '(proc) '()
				  `((test (op primitive-procedure?) (reg proc))
				    (branch (label ,primitive-branch))
				    (test (op compound-procedure?) (reg proc))
				    (branch (label ,compound-branch))))
       (parallel-instruction-sequences
        (append-instruction-sequences
         compiled-branch
         (compile-proc-appl target compiled-linkage))
	(parallel-instruction-sequences
	 (append-instruction-sequences
	  compound-branch
	  (if (eq? target 'val)
	      (end-with-linkage
	       compiled-linkage
	       (make-instruction-sequence
		'(proc argl) all-regs
		`((assign continue (label ,after-call))
		  (goto (reg compapp)))))
	      (append-instruction-sequences
	       (make-instruction-sequence
		'(proc argl) `(,target continue)
		`((assign continue (label ,after-compapp))
		  (goto (reg compapp))))
	       after-compapp
	       (make-instruction-sequence
		'(val) (list target)
		`((assign ,target (reg val)))))))
         (append-instruction-sequences
          primitive-branch
          (end-with-linkage linkage
			    (make-instruction-sequence
			     '(proc argl) (list target)
			     `((assign ,target
				       (op apply-primitive-procedure)
				       (reg proc)
				       (reg argl))))))))
       after-call))))

;;~5.49 : 5.5.7_Eval_n_Compile.scm
5.50 ;;EX_5.50.scm, 5.5.7_Eval_n_Compile.scm

5.51
;;아이디어

;;구조체로 타입 들고 있게 하자
;;사실상 eval,apply와 그 procedure에서 언급되는 함수만 남기고 바꿔야 함
;;전역변수로 malloc한 것들을 남기고 REPL 한바퀴마다 전역변수 + 함수에 없는 malloc을 지우는 식으로 구현해야겠다
;;lambda 의 env는 env-stick이라는 공간과 var-plane이라는 공간을 받고
;;env-stick은 var-plane(frame이다)을 반대로 뒤집힌 array로 갖고 있고 가장 가까운 frame의 포인터도 표시한다
;;var-plane은 pair로 묶인 var와 val을 다시 pair로 묶인 linked list 로 갖게 한다

5.52
;;아이디어

;;그냥 C에 있는 goto 쓰면 되긴 하는데 어쨌든 명령에도 타입 필요해서 1:1하기는 어렵고 5.51만들면서 생긴 함수 써야 한다
