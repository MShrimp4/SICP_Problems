;Metacircular Evaluator - vanila

(define (self-evaluating? exp)
  (cond ((number? exp) #t)
	((string? exp) #t)
	(else #f)))
(define (variable? exp) (symbol? exp))
(define (assignment? exp) ; (set! var val)
  (tagged-list? exp 'set!))
(define (assignment-variable exp) (cadr exp))
(define (assignment-value exp) (caddr exp))
(define (definition? exp) ; (define ~~~)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp);(define x y)
      (caadr exp)));(define (x) (y))
(define (defintion-value exp)
  (if (symbol? (cadr exp))
      (caddr exp) ;(define x y) -> x
      (make-lambda (cdadr exp);(define (sq x) (* x x)) -> x
		   (cddr exp))));(define (sq x) (* x x)) -> (* x x)
(define (lambda? exp);(lambda (x) y)
  (tagged-list? exp 'lambda))
(define (lambda-parameters exp) (cadr exp))
(define (lambda-body exp) (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda parameters body))
(define (if? exp) ;(if pred conseq alt)
  (tagged-list? exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
      (caddr exp)
      'false))
(define (make-if pred conseq alt)
  (list 'if pred conseq alt))
(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))
(define (sequence->exp seq)
  (cond ((null? seq) seq)
	((last-exp? seq) (first-exp seq))
	(else (make-begin seq))))
(define (make-begin seq) (cons 'begin seq))
(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no-operands? ops) (null? ops))
(define (rest-operands ops) (cdr ops))
(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
      'false
      (let ((first (car clauses))
	    (rest (cdr clauses)))
	(if (cond-else-clause? first)
	    (if (null? rest)
		(sequence->exp (cond-actions first))
		(errorf 'COND->IF "else clause isn`t last"))
	    (make-if (cond-predicate first)
		     (sequence->exp (cond-actions first))
		     (expand-clauses rest))))))
(define (quoted? exp) ;(quote something)
  (tagged-list? exp 'quote))
(define (text-of-quotation exp) (cadr exp))
(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      #f))
;could use maps
(define (list-of-values exps env);_arguments_ _eval
  (if (no-operands? exps)
      '()
      (cons (eval (first-operand exps) env)
	    (list-of-values (rest-operands exps) env))))
(define (eval-if exp env);_conditionals_
  (if (true? (eval (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
		       (eval (assignment-value exp) env)
		       env)
  'ok)
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
                    (eval (definition-vaule exp) env)
		    env)
  'ok)
(define (eval-sequence exps env);_sequences_ _eval
  (cond ((last-exp? exps) (eval (first-exp exps) env))
	(else (eval (first-exp exps) env)
	      (eval-sequence (rest-exps exps) env)))))
(define (eval exp env);_eval_
  (cond
   ((self-evaluating? exp) exp)
   ((variable? exp) (lookup-variable-value exp env))
   ((quoted? exp) (text-of-quotation exp))
   ((assigment? exp) (eval-assignment exp env))
   ((definition? exp) (eval-definition exp env))
   ((if? exp) (eval-if exp env))
   ((lambda? exp)
    (make-procedure (lambda-parameters exp)
		    (lambda-body exp)
		    env))
   ((begin? exp)
    (eval-sequence (begin-actions exp) env))
   ((cond? exp) (eval (cond->if exp) env))
   ((application? exp)
    (apply (eval (operator exp) env)
	   (list-of-values (operands exp) env)))
   (else (errorf 'EVAL "Unknown Expression Type"))))
(define (apply procedure arguments);_apply_
  (cond ((primitive-procedure? procedure)
	 (apply-primitive-procedure procedure arguments))
	((compound-procedure? procedure)
	 (eval-sequence
	  (procedure-body procedure)
	  (extend-environment
	   (procedure-parameters procedure)
	   arguments
	   (procedure-environment procedure))))
	(else (errorf 'APPLY "Unknown Procedure Type"))))
;Metacircular Evaluator - Tweaked

4.1
(define (list-of-values exps env);Left
  (if (no-operands? exps)
      '()
      (let ((head (eval (first-operand exps) env)))
	(cons head
	      (list-of-values (rest-operands exps) env)))))
(define (list-of-values exps env);Right
  (if (no-operands? exps)
      '()
      (let ((tail (list-of-values (rest-operands exps) env)))
	(cons (eval (first-operand exps) env)
	      tail))))

4.2
;a : does not detect special forms anymore
;b
(define (application? exp) (tagged-list? exp 'call))
(define (app-exp exp) (cdr exp))
(define (eval exp env)
  (cond
   ((self-evaluating? exp) exp)
   ((variable? exp) (lookup-variable-value exp env))
   ((application? exp)
    (apply (eval (operator (app-exp exp)) env)
	   (list-of-values (operands (app-exp exp)) env)))
   ((quoted? exp) (text-of-quotation exp))
   ((assigment? exp) (eval-assignment exp env))
   ((definition? exp) (eval-definition exp env))
   ((if? exp) (eval-if exp env))
   ((lambda? exp)
    (make-procedure (lambda-parameters exp)
		    (lambda-body exp)
		    env))
   ((begin? exp)
    (eval-sequence (begin-actions exp) env))
   ((cond? exp) (eval (cond->if exp) env))
   (else (errorf 'EVAL "Unknown Expression Type"))))

4.3
