4.1
(define (list-of-values exps env);Left
  (if (no-operands? exps)
      '()
      (let ((head (eval (first-operand exps) env)))
	(cons head
	      (list-of-values (rest-operands exps) env)))))
(define (list-of-values exps env);Right
  (if (no-operands? exps)
      '()
      (let ((tail (list-of-values (rest-operands exps) env)))
	(cons (eval (first-operand exps) env)
	      tail))))

4.2
;a : does not detect special forms anymore
;b
(define (application? exp) (tagged-list? exp 'call))
(define (app-exp exp) (cdr exp))
(define (eval exp env)
  (cond
   ((self-evaluating? exp) exp)
   ((variable? exp) (lookup-variable-value exp env))
   ((application? exp)
    (apply (eval (operator (app-exp exp)) env)
	   (list-of-values (operands (app-exp exp)) env)))
   ((quoted? exp) (text-of-quotation exp))
   ((assigment? exp) (eval-assignment exp env))
   ((definition? exp) (eval-definition exp env))
   ((if? exp) (eval-if exp env))
   ((lambda? exp)
    (make-procedure (lambda-parameters exp)
		    (lambda-body exp)
		    env))
   ((begin? exp)
    (eval-sequence (begin-actions exp) env))
   ((cond? exp) (eval (cond->if exp) env))
   (else (errorf 'EVAL "Unknown Expression Type"))))

4.3
;using 3.25
(define *ev-table* (make-table eq?))
(define (put op type item)
  ((*ev-table* 'insert-proc!) (list op type) item))
(define (get op type)
  ((*ev-table* 'lookup-proc) (list op type)))

(define (self-evaluating? exp)
  (cond ((number? exp) #t)
	((string? exp) #t)
	(else #f)))
(define (variable? exp) (symbol? exp))

(define (add-assignment)
  (define (assignment-variable exp) (cadr exp))
  (define (assignment-value exp) (caddr exp))
  (define (eval-assignment exp env)
    (set-variable-value! (assignment-variable exp)
			 (eval (assignment-value exp) env)
			 env)
    'ok)
  (put 'eval 'set! eval-assignment))
(define (add-definition)
  (define (definition-variable exp)
    (if (symbol? (cadr exp))
	(cadr exp);(define x y)
	(caadr exp)));(define (x) (y))
  (define (defintion-value exp)
    (if (symbol? (cadr exp))
	(caddr exp) ;(define x y) -> x
	(make-lambda (cdadr exp);(define (sq x) (* x x)) -> (x)
		     (cddr exp))))
  (define (eval-definition exp env)
    (define-variable! (definition-variable exp)
      (eval (definition-value exp) env)
      env)
    'ok)
  (put 'eval 'define eval-definition))
(define (add-lambda)
  (define (lambda-parameters exp) (cadr exp))
  (define (lambda-body exp) (cddr exp))
  (define (make-lambda parameters body)
    (cons 'lambda parameters body))
  (define (eval-lambda exp env)
    (make-procedure (lambda-parameters exp)
		    (lambda-body exp)
		    env))
  (put 'eval 'lambda eval-lambda))

(define (add-if)
  (define (if-predicate exp) (cadr exp))
  (define (if-consequent exp) (caddr exp))
  (define (if-alternative exp)
    (if (not (null? (cdddr exp)))
	(caddr exp)
	'false))
  (define (make-if pred conseq alt)
    (list 'if pred conseq alt))
  (define (eval-if exp env)
    (if (true? (eval (if-predicate exp) env))
	(eval (if-consequent exp) env)
	(eval (if-alternative exp) env)))
  (put 'eval 'if eval-if))

;etc etc

(define (eval exp env);_eval_
  (cond
   ((self-evaluating? exp) exp)
   ((variable? exp) (lookup-variable-value exp env))
   ((get 'eval (tag exp))
    ((get 'eval (tag exp)) exp env))
   ((application? exp)
    (apply (eval (operator exp) env)
	   (list-of-values (operands exp) env)))
   (else (errorf 'EVAL "Unknown Expression Type"))))

4.4
(define (or? exp) (tagged-list? exp 'or))
(define (and? exp) (tagged-list? exp 'and))
(define (tests exp) (cdr exp))
(define (eval-or lst env)
  (cond ((null? lst) 'false)
	((true? (eval (car lst) env)) 'true)
	(else (eval-or (cdr lst) env))))
(define (eval-and lst env)
  (cond ((null? lst) 'true)
	((not (true? (eval (car lst) env))) 'false)
	(else (eval-and (cdr lst) env))))


(define (eval exp env);_eval_
  (cond
   ((self-evaluating? exp) exp)
   ((variable? exp) (lookup-variable-value exp env))
   ((quoted? exp) (text-of-quotation exp))
   ((assigment? exp) (eval-assignment exp env))
   ((definition? exp) (eval-definition exp env))
   ((if? exp) (eval-if exp env))
   ((lambda? exp)
    (make-procedure (lambda-parameters exp)
		    (lambda-body exp)
		    env))
   ((begin? exp)
    (eval-sequence (begin-actions exp) env))
   ((cond? exp) (eval (cond->if exp) env))
   ((and? exp) (eval-and (tests exp) env))
   ((or? exp) (eval-or (tests exp) env))
   ((application? exp)
    (apply (eval (operator exp) env)
	   (list-of-values (operands exp) env)))
   (else (errorf 'EVAL "Unknown Expression Type"))))

;derivated version
(define (and->cond lst)
  (define (rec lst)
    (if (null? lst)
	(list (list 'else 'true))
	(cons (list (list 'not (car lst)) 'false)
	      (rec (cdr lst)))))
  (cons 'cond (rec lst)))
(define (or->cond lst)
  (define (rec lst)
    (if (null? lst)
	(list (list 'else 'false))
	(cons (list (car lst) 'true)
	      (rec (cdr lst)))))
  (cons 'cond (rec lst)))
(define (eval exp env);_eval_
  (cond
   ((self-evaluating? exp) exp)
   ((variable? exp) (lookup-variable-value exp env))
   ((quoted? exp) (text-of-quotation exp))
   ((assigment? exp) (eval-assignment exp env))
   ((definition? exp) (eval-definition exp env))
   ((if? exp) (eval-if exp env))
   ((lambda? exp)
    (make-procedure (lambda-parameters exp)
		    (lambda-body exp)
		    env))
   ((begin? exp)
    (eval-sequence (begin-actions exp) env))
   ((cond? exp) (eval (cond->if exp) env))
   ((and? exp) (eval (and->cond (tests exp)) env))
   ((or? exp) (eval (or->cond (tests exp)) env))
   ((application? exp)
    (apply (eval (operator exp) env)
	   (list-of-values (operands exp) env)))
   (else (errorf 'EVAL "Unknown Expression Type"))))

4.5
(define (arrowed? clause) (eq? '=> (cadr clause)))
(define (arrowed-action clause) (caddr clause))
(define (expand-clauses clauses)
  (if (null? clauses)
      'false
      (let ((first (car clauses))
	    (rest (cdr clauses)))
	(if (cond-else-clause? first)
	    (if (null? rest)
		(sequence->exp (cond-actions first))
		(errorf 'COND->IF "else clause isn`t last"))
	    (if (arrowed? first)
		(make-if (cond-predicate first)
			 (list (arrowed-action first) (cond-predicate first))
			 (expand-clauses rest))
		(make-if (cond-predicate first)
			 (sequence->exp (cond-actions first))
			 (expand-clauses rest)))))))

;test
(cond->if
 '(cond ((assoc 'b '((a 1) (b 2))) => cadr)
	(true 'lol)
	(else false)))

4.6
(define (let? exp) (tagged-list? exp 'let))
(define (make-lambda varlist . expressions)
  (append (list 'lambda varlist)
	  expressions))
(define (let-binds exp) (cadr exp))
(define (let-body-lst exp) (cddr exp))
(define (extract-vars exp) (map car exp))
(define (extract-vals exp) (map cadr exp))
(define (make-let binds . body-lst)
  (cons 
   (apply make-lambda (extract-vars binds) body-lst)
   (extract-vals binds)))
(define (let->combination exp)
  (apply make-let (let-binds exp) (let-body-lst exp)))

;test
(let->combination
 '(let ((a 3) (b 2))
    (yo)
    (hey)))

4.7
(define (let*? exp) (tagged-list? exp 'let*))
(define (let*->nested-lets exp)
  (define (rec binds body-lst)
    (if (null? (cdr  binds))
	(apply make-let (list (car binds)) body-lst)
	(make-let (list (car binds)) (rec (cdr binds) body-lst))))
  (rec (let-binds exp) (let-body-lst exp)))

;test
(eval (let*->nested-lets
       '(let* ((x 3)
	       (y (+ x 2))
	       (z (+ x y 5)))
	  (display "YOY")
	  (* x z))))

4.8
(define (casing-env . exps)
  (list (apply make-lambda '() exps)))
(define (make-definition name exp)
  (list 'define name exp))
(define (named-let? exp) (not (pair? (cadr exp))))
(define (name-of-let exp) (cadr exp))
(define (named-let-binds exp) (caddr exp))
(define (named-let-body-list exp) (cdddr exp))
(define (make-named-let name binds . body-list)
   (casing-env
       (make-definition name
	     (apply make-lambda (extract-vars binds)
		    body-list))
       (cons name (extract-vals binds))))
(define (let->combination exp)
  (if (named-let? exp)
      (apply make-named-let
	     (name-of-let exp)
	     (named-let-binds exp) (named-let-body-list exp))
      (apply make-let (let-binds exp) (let-body-lst exp))))

;test
(eval
 (list 'let (list(list 'n 5))
       (let->combination
	'(let fib-iter ((a 1)
			(b 0)
			(count n))
	   (if (= count 0)
	       b
	       (fib-iter (+ a b) a (- count 1)))))))

4.9
(define (do? env) (tagged-list? env 'do))
(define (do-vars binds) (map car binds))
(define (do-init binds) (map cadr binds))
(define (do-iter binds) (map caddr binds))
(define (make-do binds test . exps)
  (let ((temp-name (gensym)))
    (casing-env
     (make-definition
      temp-name
      (make-lambda
       (do-vars binds)
       (list 'cond
	     test
	     (append '(else)
		   exps
		   (list (cons temp-name (do-iter binds)))))))
     (cons temp-name (do-init binds)))))
(define (do->combination exp)
  (apply make-do (cdr exp)))
(do->combination
 '(do
      ((i 1 (+ i 1))
       (j 1 j))
      ((= i 10) 'done)
    (display i)
    (newline)))

4.12
(define (scan-frame vars vals)
  (cond ((null? vars) #f)
	((eq? var (car vars)) vals)
	(else (scan-frame (cdr vars) (cdr vals)))))
(define (env-loop env)
  (if (eq? env the-empty-environment)
      #f
      (let ((frame (first-frame env)))
	(let ((scanned (scan-frame
			(frame-variables frame)
			(frame-values frame))))
	  (if scanned
	      scanned
	      (env-loop (enclosing-environment env)))))))
(define (lookup-variable-value var env)
  (let ((scan-val (env-loop env)))
    (if scan-val
	(car scan-val)
	(errorf 'lookup-variable-value "Unbound variable : ~s" var))))
(define (set-variable-value! var val env)
  (let ((scan-val (env-loop env)))
    (if scan-val
	(set-car! scan-val val)
	(errorf 'set-variable-value! "Unbound variable ~s" var))))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (let ((scan-val (scan-frame
		     (frame-variables frame)
		     (frame-values frame))))
      (if scan-val
	  (set-car! scan-val val)
	  (add-binding-to-frame! var val frame)))))

4.13
;remove first encounter.

(define (scan-frame-full vars vals)
  (cond ((null? vars) #f)
	((eq? var (car vars)) (cons vars vals))
	(else (scan-frame-full (cdr vars) (cdr vals)))))
(define (env-loop-full env)
  (if (eq? env the-empty-environment)
      #f
      (let ((frame (first-frame env)))
	(let ((scanned (scan-frame
			(frame-variables frame)
			(frame-values frame))))
	  (if scanned
	      scanned
	      (env-loop-full (enclosing-environment env)))))))
(define (make-unbound! var env)
  (let ((scanned (env-loop-full env)))
    (if scanned
	(let ((sc-var (car scanned))
	      (sc-val (cdr scanned)))
	  (set-car! sc-var (cadr sc-var))
	  (set-cdr! sc-var (cddr sc-var))
	  (set-car! sc-val (cadr sc-val))
	  (set-cdr! sc-val (cddr sc-val))
	  'removed)
	'already-removed)))


;on evaluator
(define (unbinder? exp)
  (tagged-list? exp 'unbind!))
(define (unbind exp env)
  (let ((removed-var (cadr exp)))
    (make-unbound! var env)))

;4.16~20 : Meta_Eval.scm
(define (f x)
  ((lambda (even? odd?)
     (even? even? odd? x))
   (lambda (ev? od? n)
     (if (= n 0) #t (od? ev? od? (- n 1))))
   (lambda (ev? od? n)
     (if (= n 0) #f (ev? ev? od? (- n 1))))))



;;;

4.27
; 1 10 2
; REPL is on actual-value - define so one layer gets eval`d
; after forcing w rest of layer gets eval`d

4.28
;compound display procedure?

4.29
;9 1
;memoized

4.30

4.31

;;4.32-34
(define (cons m n)
  (lambda (f) (f m n)))
(define (car pa)
  (pa (lambda (m n) m)))
(define (cdr pa)
  (pa (lambda (m n) n)))
(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))))
(define (map proc items)
  (if (null? items)
      '()
      (cons (proc (car items))
	    (map proc (cdr items)))))
(define (scale-list items factor)
  (map (lambda (x) (* x factor))
       items))
(define (add-lists list1 list2)
  (cond ((null? list1) list2)
	((null? list2) list1)
	(else (cons (+ (car list1) (car list2))
		    (add-lists (cdr list1) (cdr list2))))))
(define ones (cons 1 ones))
(define integers (cons 1 (add-lists ones integers)))
(define (integral integrand initial-value dt)
  (define int
    (cons initial-value
	  (add-lists (scale-list integrand dt)
		     int)))
  int)
(define (solve f y0 dt)
  (define y (integral dy y0 dt))
  (define dy (map f y))
  y)
n(list-ref (solve (lambda (x) x) 1 0.001) 1000)

4.32
;map nested lists


;


;4.35~
(define (require p)
  (if (not p) (amb)))
(define (an-element-of items)
  (require (not (null? items)))
  (amb (car items) (an-element-of (cdr items))))
(define (an-integer-starting-from n)
  (amb n (an-integer-starting-from (+ n 1))))

4.35
(define (an-integer-between lo hi)
  (if (< hi lo)
      '()
      (amb lo (an-integer-between (+ lo 1) hi))))

4.36
(define (a-pythagorean-triple)
  (let ((k (an-integer-starting-from 1))
	(j (an-integer-between 1 k))
	(i (an-integer-between 1 j)))
    (require (= (+ (* i i) (* j j)) (* k k)))
    (list i j k)))

4.37
(define (map func lst)
  (if (null? lst)
      '()
      (cons (func (car lst)) (map func (cdr lst)))))
(define (for-each func lst)
  (if (null? lst)
      #t
      (begin
	(func (car lst))
	(for-each func (cdr lst)))))
(define (father lst) (car lst))
(define (daughter lst) (car (cdr lst)))
(define (yacht lst) (car (cdr (cdr lst))))
(define (find whose name FDY)
  (cond ((null? FDY) (amb))
	((eq? name (whose (car FDY)))
	 (car FDY))
	(else (find whose name (cdr FDY)))))
(define (yacht-of name FDY) (yacht (find father name FDY)))
(define (daughter-of name FDY) (daughter (find father name FDY)))
(define (father-of name FDY) (father (find daughter name FDY)))
(define (daughters FDY) (map daughter FDY))
(define (yachts FDY) (map yacht FDY))
(define (yacht-problem)
  (let ((names (list 'Mary 'Gabrielle 'Lorna 'Rosalind 'Melissa)))
    (let ((FDY (list
		(list 'Moore 'Mary 'Lorna)
		(list 'Barnacle (an-element-of names) 'Gabrielle)
		(list 'Colonel (an-element-of names) 'Melissa)
		(list 'Hall (an-element-of names) 'Rosalind)
		(list 'Parker (an-element-of names) (an-element-of names)))))
      (require (distinct? (yachts FDY)))
      (for-each (lambda (d y) (require (distinct? (cons d y))))
		(daughters FDY) (yachts FDY))
      (require (eq? (yacht-of 'Colonel FDY)
		    (daughter-of 'Barnacle FDY)))
      (require (eq? (daughter-of 'Parker FDY)
		    (father-of 'Gabrielle FDY)))
      (require (distinct? (daughters FDY))))))

4.44
(define (construct-queen possible n)
  (define (iter possible n board)
    (if (= n 0)
	board
	(let ((new-queen (cons
			  (an-element-of possible)
			  (an-element-of possible))))
	  (require (not (conflict? new-queen board)))
	  (cons new-queen board))))
  (iter possible n '()))
(define (8queen) (construct-queen (an-integer-between 1 8) 8))


;;;;;


4.55
(supervisor ?x (Bitdiddle Ben)) ;a
(job ?x (<division> . ?type)) ;b
(address ?x (Slumerville . ?type));c

4.56
(and
 (supervisor ?x (Bitdiddle Ben))
 (address ?x ?addr)) ;a
(and
 (salary (Bitdiddle Ben) ?amount-BBD)
 (salary ?x ?amount)
 (lisp-value < ?amount ?amount-BBD)) ;b
(and
 (supervisor ?person ?su)
 (not (job ?su (computer . ?any)))
 (job ?su ?su-job));c

4.57
(rule (can-do-job-rec ?job1 ?job2)
      (or
       (can-do-job ?job1 ?job2)
       (and
	(can-do-job ?mid-job ?job2)
	(can-do-job-rec ?job1 ?mid-job))))
(rule (can-replace-with ?person1 ?person2)
      (or
       (and
	(job ?person1 ?job)
	(job ?person2 ?job))
       (and
	(job ?person1 ?job1)
	(job ?person2 ?job2)
	(can-do-job-rec ?job1 ?job2))))
;;;;;
(can-replace-with ?person (Fect Cy D));a
(and (can-replace-with ?p1 ?p2)
     (salary ?p1 ?s1)
     (salary ?p2 ?s2)
     (lisp-value > ?s1 ?s2)
     ;(not (same? ?p1 ?p2)) ;;unused : Lisp-value guarantees
     )
(rule (big-shot ?person)
      (and
       (job ?person (?division . ?any))
       (job ?super (?division . ?any))
       (not (supervisor ?person ?super))
       (not (same ?person ?super))))

4.59
(meeting ?any (Friday ?time)) ;a
(rule (meeting-time ?person ?day-and-time)
      (or
       (meeting whole-company ?day-and-time)
       (and
	(job ?person (?division . ?any))
	(meeting ?division ?day-and-time))));b
(meeting-time (Hacker Alyssa P) (Wednesday ?time));c

4.60
;Both person1 and person2 can match any people if !=

(and
 (lives-near ?p1 ?p2)
 (lisp-value preceding? ?p1 ?p2));preceding alphabetic order etc.

4.62
(rule (last-pair (?head) ?x))
(rule (last-pair (?head . ?tail) ?x)
      (last-pair ?tail ?x))

4.63
(rule (son-of ?parent ?son)
      (or
       (son ?parent ?son)
       (and
	(or
	 (wife ?parent ?other-parent)
	 (wife ?other-parent ?parent))
	(son ?other-parent ?son))))
(rule (grandson-of ?grandparent ?grandson)
      (and (son-of ?grandparent ?parent)
	   (son-of ?parent ?grandson)))

(grandson-of Cain ?grandsons)
(son-of Lamech ?sons)
(grandson-of Methushael ?grandsons)

4.68
(rule (rev () ?rev ?rev))
(rule (rev (?h . ?t) ?r rev)
      (rev ?t (?h. ?r) rev))
(rule (reverse ?lst ?reverse)
      (rev ?lst () ?reverse))

(rule (reverse () ()))
(rule (reverse (?h . ?t) ?reverse)
      (and
       (reverse ?t ?rev)
       (append-to-form  ?rev ?h ?reverse)))

4.69
(rule ((grandson) ?x ?y)
      (grandson ?x ?y))
(rule ((great . ?rel) ?x ?y)
      (and
       (son-of ?x ?sx)
       (?rel ?sx ?y)))
