2.17
(define (last-pair l)
  (if (null? (cdr l)) l (last-pair (cdr l))))
(last-pair (list 23 72 149 34))

2.18
(define (reverse l)
  (define (iter old new)
    (if (null? old)
        new
        (iter (cdr old) (cons (car old) new))))
  (iter l '()))

2.19
(define no-more? null?)
(define except-first-denomination cdr)
(define first-denomination car)

2.20
(define (same-parity x . y)
  (define (rec par l)
    (cond ((null? l) '())
          ((eq? (even? (car l)) par)
           (cons (car l) (rec par (cdr l))))
          (else (rec par (cdr l)))
        ))
  (rec (even? x) (cons x y)))

2.21
(define (square-list items)
  (define (sq x) (* x x))
  (if (null? items)
      '()
      (cons (sq (car items)) (square-list (cdr items)))))

(define (square-list-map items)
  (map (lambda (x) (* x x)) items))


2.23
(define (for-each proc lst)
  (if (null? lst)
      '()
      (begin
        (proc (car lst))
        (for-each proc (cdr lst)))))

2.27
(define (deep-reverse lst)
  (define (iter old new)
    (cond ((null? old) new)
          ((pair? (car old)) (iter (cdr old) (cons (deep-reverse (car old)) new)))
          (else (iter (cdr old) (cons (car old) new)))))
  (iter lst '()))

2.28
(define (fringe lst)
  (define (rec lst next)
    (cond ((null? lst) next)
          ((pair? lst) (rec (car lst) (rec (cdr lst) next)))
          (else (cons lst next))))
  (rec lst '()))

2.29
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cadr mobile))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cadr branch))
(define (mobile-or-weight object)
  (if (pair? object)
      (total-weight object)
      object))
(define (branch-weight branch)
  (mobile-or-weight (branch-structure branch)))
(define (total-weight mobile)
  (if (pair? mobile)
      (+ (branch-weight (left-branch mobile))
        (branch-weight (right-branch mobile)))
      mobile))
(define (balanced? mobile)
  (define (left-struct mobile)
    (branch-structure (left-branch mobile)))
  (define (right-struct mobile)
    (branch-structure (right-branch mobile)))
  (define (torque branch)
    (* (total-weight (branch-structure branch)) (branch-length branch)))
  (if (pair? mobile)
      (and (= (torque (left-branch mobile))
          (torque (right-branch mobile)))
           (balanced? (left-struct mobile))
           (balanced? (right-struct mobile)))
      #t ))

2.30
(define (square x) (* x x))
(define (square-tree tree)
  (cond ((null? tree) tree)
         ((pair? tree) (cons (square-tree (car tree))
                                 (square-tree (cdr tree))))
         (else (square tree))))
(define (square-tree-map tree)
  (if (pair? tree)
      (map square-tree-map tree)
      (square tree)))

2.31
(define (square-tree tree) (tree-map square tree))
(define (tree-map f tree)
  (cond ((null? tree) tree)
        ((pair? tree) (cons (tree-map f (car tree))
                            (tree-map f (cdr tree))))
        (else (f tree))))

2.32
(define (subsets s)
  (if (null? s)
      (list nil)
      (let ((rest (subsets (cdr s))))
        (append rest (map (lambda (x) (cons (car s) x)) rest)))))

2.33
(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) nil sequence))
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))
(define (length sequence)
  (accumulate (lambda (x y) (+ y 1)) 0 sequence))
(define (length sequence)
  (accumulate (lambda (x y) (+ y 1)) 0 sequence))

2.34
(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms) (+ this-coeff (* x higher-terms)))
              0
              coefficient-sequence))

2.35
(define (count-leaves t)
  (accumulate + 0 (map (lambda (x) 1) t)))

2.36
(define (accumulate-n op init seqs)
  (define (cars lis)
    (if (null? lis)
	'()
	(cons (caar lis) (cars (cdr lis)))))
  (define (cdrs lis)
    (if (null? lis)
	'()
	(cons (cdar lis) (cdrs (cdr lis)))))
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (cars seqs))
            (accumulate-n op init (cdrs seqs)))))

2.37
;(define (dot-product v w)(map (lambda (a b) (map * a b)) v w))
(define (dot-product v w)
  (map * v w))
(define (matrix-*-vector m w)
  (if (null? m)
      '()
      (cons (fold-right + 0 (dot-product (car m) w))
	    (matrix-*-vector (cdr m) w))))
;use fold-right (fold-left when + etc.) instead of accumulate
(define (transpose mat)
  (accumulate-n (lambda (cur next) (cons cur next)) '() mat))
(define (matrix-*-matrix m n)
  (define (calc-rows m inv-n)
    (if (null? m)
	'()
	(cons (matrix-*-vector inv-n (car m)) (calc-rows (cdr m) inv-n))))
  (calc-rows m (transpose n)))
;(define accumulate fold-right)

2.39
(define (reverse sequence)
  (fold-left (lambda (x y) (if (null? y) x (cons y x))) '() sequence))
(define (reverse sequence)
  (fold-right (lambda (x y)
		(if (null? y)
		    (list x)
		    (append y (list x))))
	      '()
	      sequence))

2.40
(define (enumerate-interval stt end)
  (if (> stt end)
      '()
      (cons stt (enumerate-interval (+ 1 stt) end))))
(define (unique-pairs n)
  (fold-right (lambda (j prev)
		(append (map
		     (lambda (i) (cons i j))
		     (enumerate-interval 1 j))
		    prev))
	      '()
	      (enumerate-interval 1 n)))
(define (prime? n)
  (define (iter cur n rn)
    (cond
     ((< rn cur) #t)
     ((= (remainder n cur) 0) #f)
     (else (iter (+ 1 cur) n rn))))
  (iter 2 n (sqrt n)))
(define (prime-sum-pairs n)
  (define (prime-sum? pair)
    (prime? (+ (car pair) (cdr pair))))
  (filter prime-sum? (unique-pairs n)))

2.41
(define (flatmap f lis)
  (fold-right (lambda (x rest) (append (f x) rest)) '() lis))
(define (unique-list n len)
  (if (= len 1)
      (map list (enumerate-interval 1 n))
      (flatmap
       (lambda (ulist)
	 (map
	  (lambda (x) (cons x ulist))
	  (filter
	   (lambda (obj) (not (member obj ulist)))
	   (enumerate-interval 1 n))))
       (unique-list n (- len 1)))))
(define (unique-triple n) (unique-list n 3))

2.42
(define (queens board-size)
  (define (queen-cols k)  
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))
(define row car)
(define col cdr)
(define make-pos cons)
(define empty-board '())
(define (adjoin-position r c rest)
  (cons (make-pos r c) rest))
(define (safe? k positions)
  (define (safe-queen? p positions)
    (define (conflict? p1 p2)
      (or
       (= (row p1) (row p2))
       ;(= (col p1) (row p2)) ;;Not needed
       (= (+ (row p1) (col p1))
	  (+ (row p2) (col p2)))
       (= (- (row p1) (col p1))
	  (- (row p2) (col p2)))))
    (cond
     ((null? positions) #t)
     ((conflict? (car positions) p) #f)
     (else (safe-queen? p (cdr positions)))))
  (if (= k (col (car positions)))
      (safe-queen? (car positions) (cdr positions))
      (errorf 'safe? "Well, that was unexpected. My bad.")))

;;;2.43~2.52:pict_lang


;;;DERIV
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))))
        (else
         (error "unknown expression type -- DERIV" exp))))

2.56
(define (pow? exp) (eq? '** (car exp)))
(define (base exp) (cadr exp))
(define (pow exp) (caddr exp))
(define (make-pow base pwr)
  (cond ((=number? pwr 0) 1)
	((and (number? base) (number? pwr)) (expt base pwr))
      (list '** base pwr)))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
	((pow? exp)
	 (cond
	  ((eq? (pow exp) var)
	   (if (eq? (base exp) var)
	       (errorf 'deriv "Could not be derivated : ~s" exp)
	       (errorf 'derive "n^var form is not yet implemented")))
	  ((=number? (pow exp) 0) 0)
	  (else
	   (make-product (pow exp)
	    (make-product (deriv (base exp) var)
			  (make-pow (base exp) (make-sum (pow exp) -1)))))))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))))
        (else
         (errorf 'deriv "unknown expression type : ~s" exp))))

2.57 ;NAH CP_4 has way more cool solution about this situation
(define (augend s) (if (null? (cdddr s)) (caddr s) (cons '+ (cddr s))))
(define (multiplicand p) (if (null? (cdddr s)) (caddr s) (cons '* (cddr p))))

2.58
;;;a
(define (sum? s) (eq? (caddr s) '+))
(define (product? s) (eq? (caddr s) '*))
(define addend car)
(define augend caddr)
(define multiplier car)
(define multiplicand caddr)
;;;;b
(define (sum? s) (memq '+ s))
(define (product? s) (and (not (sum? s)) (eq? (cadr s) '*)))
(define (product-prec? s) (eq? (caddr s) '*))
(define (no-more? s) (null? (restexp s)))
(define (restexp s) (cdddr s))
(define (augend s)
  (define (find-pure+ aug add)
    (if (eq? '* (car add))
	(find-pure+ (append aug (list '* (cadr add))) (cddr add))
	aug))
  (cond ((no-more? s) (caddr s))
	(else (find-pure+ (car s) (cdr s)))))
(define (addend s) (cdr (memq '+ s)))
(define multiplier car)
(define (multiplicand s)
  (if (no-more? s) (caddr s) (cddr s)))
;;;Lazy to implement ignore parens :: Could make flat-products

;;;Set as unordered list
2.59
(define (union-set s1 s2)
  (cond ((null? s1) s2)
	((memq (car s1) s2) (union-set (cdr s1) (cons (car s1) s2)))
	(else (union-set (cdr s1) s2))))

2.60
(define element-of-set? memq)
(define (intersection-set s1 s2)
  (define (iter s s1 s2)
    (cond
     ((null? s1) s)
     ((memq (car s1) s) (iter s (cdr s1) s2));making it inefficient
     ((memq (car s1) s2) (iter (cons (car s1) s) (cdr s1) s2))
     (else (iter s (cdr s1) s2))))
  (iter '() s1 s2))
(define (union-set s1 s2)
  (define (iter s s1 s2)
    (cond
     ((null? s1) (if (null? s2) s (iter s s2 s1)))
     ((memq (car s1) s) (iter s (cdr s1) s2))
     (else (iter (cons (car s1) s) (cdr s1) s2))))
  (iter '() s1 s2))
;;;or just
(define (union-set s1 s2)
  (append s1 s2))
;;;could use this for something that uses union-set & memq a lot

2.61
(define (adjoin-set x set)
  (cond ((null? set) (cons x set))
	((> x (car set)) (cons (car set) (adjoin-set x (cdr set))))
	((= x (car set)) set)
	((< x (car set)) (cons x set))));could use else instead
(define (element-of-set? x set)
  (cond ((> x (car set)) #f)
	((= x (car set)) set);like memq
	(else (element-of-set? (element-of-set? x (cdr set)))))) ;else will work

2.62
(define (union-set s1 s2)
  (cond ((null? s1) s2)
	((null? s2) s1)
	(else
	 (let ((v1 (car s1))
	       (v2 (car s2)))
	   (cond ((< v1 v2) (cons v1 (union-set (cdr s1) s2)))
		 ((= v1 v2) (cons v1 (union-set (cdr s1) (cdr s2))))
		 ((> v1 v2) (cons v2 (union-set s1 (cdr s2)))))))))

2.63
;;;a - same ;;;b grows slowly - a has unnecessary linear op time on append.

2.64;;;O(n)

2.65;; Strong Urge to use lazy lists.

2.66
(define (tree-union-set t1 t2) ;;Still O(n), but yet inefficient
  (list->tree (union-set (tree->list t1) (tree->list t2))))
(define (tree-intersection-set t1 t2)
  (list->tree (intersetction-set (tree-list t1) (tree->liset t2))))

;;;Huffman
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit -- CHOOSE-BRANCH" bit))))
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))
2.67;ADABBCA

2.68
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (encode-symbol sym tree)
  (cond
   ((leaf? tree) '())
   ((memq sym (symbols (left-branch tree)))
    (cons 0 (encode-symbol sym (left-branch tree))))
   ((memq sym (symbols (right-branch tree)))
    (cons 1 (encode-symbol sym (right-branch tree))))
   (else (errorf 'encode-symbol "Symbol not in tree : ~s" sym))))

2.69
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define (make-leaf-set pairs)
  (fold-right adjoin-set
	      '()
	      (map (lambda (p) (make-leaf (car p) (cdr p))) pairs)))
(define (successive-merge leaf-set) ;if leaf-set is list
  (if (null? (cdr leaf-set))
      (car leaf-set)
      (successive-merge
       (adjoin-set
	(make-code-tree
	 (car leaf-set)
	 (cadr leaf-set))
	(cddr leaf-set)))))

2.70
(define rock-tree (generate-huffman-tree '((BOOM . 1) (WAH . 1) (A . 2) (GET . 2) (JOB . 2) (SHA . 3) (YIP . 9) (NA . 16))))
(define phrases '((GET A JOB)
		  (SHA NA NA NA NA NA NA NA NA)
		  (GET A JOB)
		  (SHA NA NA NA NA NA NA NA NA)
		  (WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP)
		  (SHA BOOM)))
(define enc-phrases (map (lambda (p) (encode p rock-tree)) phrases))
;;;84 bits
;(define dec-phrases (map (lambda (e) (decode e rock-tree)) enc-phrases))
;;;guess it will be quite longer than before when encoded in ABC
2.71;;;1~(n-1)

2.72;;;encode-symbol: 2 or 3*26

2.73
;;a - doesnt have operator/ands
;;b
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (install-sum)
  (define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2)) (+ a1 a2))
          (else (list '+ a1 a2))))
  (define (addend s) (cadr s))
  (define (augend s) (caddr s))
  (define (derivate exp var)
    (make-sum
     (deriv (addend exp) var)
     (deriv (augend exp) var)))
  (put 'gen '+ make-sum)
  (put 'er '+ addend)
  (put 'and '+ augend)
  (put 'derivate '+ derivate)
'done)
(define (install-product)
  (define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2)) (* m1 m2))
          (else (list '* m1 m2))))
  (define (product? x)
    (and (pair? x) (eq? (car x) '*)))
  (define (multiplier p) (cadr p))
  (define (multiplicand p) (caddr p))
  (define (derivate exp var)
    ((get 'gen '+)
     (make-product (multiplier exp)
                   (deriv (multiplicand exp) var))
     (make-product (deriv (multiplier exp) var)
                   (multiplicand exp))))
  (put 'gen '* make-product)
  (put 'er '* multiplier)
  (put 'and '* multiplicand)
  (put 'derivate '* derivate)
  'done)

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
	(else ((get 'deriv (operator exp)) (operands exp) var))))

;;c
(define (install-power)
  (define (base exp) (cadr exp))
  (define (pow exp) (caddr exp))
  (define (make-pow base pwr)
    (cond ((=number? pwr 0) 1)
	  ((and (number? base) (number? pwr)) (expt base pwr))
	  (list '** base pwr)))
  (define (deriv exp var)
    (cond
     ((eq? (pow exp) var)
      (if (eq? (base exp) var)
	  (errorf 'deriv "Could not be derivated : ~s" exp)
	  (errorf 'derive "n^var form is not yet implemented")))
     ((=number? (pow exp) 0) 0)
     (else
      ((get 'gen '*)
       (pow exp)
       ((get 'gen '*)
	(deriv (base exp) var)
	(make-pow (base exp) (make-sum (pow exp) -1)))))))
  (put 'gen '** make-sum)
  (put 'er '** addend)
  (put 'and '** augend)
  (put 'derivate '** derivate)
  'done)

;;d - just flipping the row-col. just fix get-sets.
2.74
;;;a - hold division name as type, and dispatch the local get-record
;;;b - hold div name, and add individual marker to distinguish a
;;;c - need meta-database tracking all the division and c->a->b
;;;d - new table on c, ops within division name needed
2.75
(define (make-from-mag-ang r a)
  (define (dispatch op)
    (cond
     ((eq? op 'real-part) (* r (cos a)))
     ((eq? op 'imag-part) (* r (sin a)))
     ((eq? op 'magnitude) r)
     ((eq? op 'angle) a)
     (else (errorf 'mag-ang "Unknown operation")))))

2.76
;;;Generic - adding ops is easy, compact
;;;Message-passing - adding new types is easy
;;;Data-directed - adding new types/ops is easy enough

2.77
;;Matches from complex-package but those 4 ops are hidden under complex package

2.78
(define (attach-tag type-tag contents)
  (if (eq? type-tag 'scheme-number)
      contents
      (cons type-tag contents)))

(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (if (number? datum)
	  'scheme-number
	  (error "Bad tagged datum -- TYPE-TAG" datum))))

(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (if (number? datum)
	  datum
	  (error "Bad tagged datum -- CONTENTS" datum))))

2.79
;;ordinary
(put 'equ? '(scheme-number scheme-number) =)
;;Given

;;rational
(define (equ? x y)
  (= (* (numer x) (denom y))
     (* (denom x) (numer y))))
(put 'equ? '(rational rational) equ?)

;;complex
(define (equ? z1 z2)
  (and (= (real-part z1) (real-part z2))
       (= (imag-part z1) (imag-part z2))))
(put 'equ? '(complex complex) equ?)
;;This is weird, because of the floting point problem

2.80
;;ordinary
(put '=zero? '(scheme-number) (lambda (x) (= x 0)))

;;rational
(define (=zero? x)
  (= (numer x) 0))
(put '=zero? '(rational) =zero?)

;;complex
(define (=zero? x) (= (magnitude x) 0))
(put '=zero? '(complex) =zero?)

2.81
;;a : inf-loop (Here we go again!)
;;b : Louis was wrong, because apply-generic calls proper proc before searching
;;    any coercing functions.
;;c :
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
		(if (eq? type1 type2)
		    (errorf 'apply-generic "No proper operation")
                    (let ((t1->t2 (get-coercion type1 type2))
			  (t2->t1 (get-coercion type2 type1)))
                      (cond (t1->t2
                             (apply-generic op (t1->t2 a1) a2))
                            (t2->t1
                             (apply-generic op a1 (t2->t1 a2)))
                            (else
                             (error "No method for these types"
                                    (list op type-tags)))))))
              (error "No method for these types"
                     (list op type-tags)))))))

2.82
;;Skipping implementation.
;;Will not work for circumstances when they have to convert into types other than themselves

;;2.83~ : skipping. Just read the problem.
